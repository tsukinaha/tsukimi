<?xml version="1.0"?>
<!-- This file was automatically generated from C sources - DO NOT EDIT!
To affect the contents of this file, edit the original C definitions,
and/or use gtk-doc annotations.  -->
<repository version="1.2"
            xmlns="http://www.gtk.org/introspection/core/1.0"
            xmlns:c="http://www.gtk.org/introspection/c/1.0"
            xmlns:glib="http://www.gtk.org/introspection/glib/1.0">
  <include name="GLib" version="2.0"/>
  <include name="GObject" version="2.0"/>
  <include name="Gio" version="2.0"/>
  <include name="Gst" version="1.0"/>
  <include name="GstAudio" version="1.0"/>
  <include name="GstBase" version="1.0"/>
  <include name="GstPbutils" version="1.0"/>
  <include name="GstTag" version="1.0"/>
  <package name="clapper-0.0"/>
  <c:include name="clapper/clapper.h"/>
  <namespace name="Clapper"
             version="0.0"
             shared-library="libclapper-0.0.so.0"
             c:identifier-prefixes="Clapper"
             c:symbol-prefixes="clapper">
    <function-macro name="AUDIO_STREAM_CAST"
                    c:identifier="CLAPPER_AUDIO_STREAM_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="AudioStream"
           c:symbol-prefix="audio_stream"
           c:type="ClapperAudioStream"
           parent="Stream"
           glib:type-name="ClapperAudioStream"
           glib:get-type="clapper_audio_stream_get_type"
           glib:type-struct="AudioStreamClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-audio-stream.c"
           line="20">Represents an audio stream within media.</doc>
      <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                       line="35"/>
      <method name="get_bitrate"
              c:identifier="clapper_audio_stream_get_bitrate"
              glib:get-property="bitrate">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="145">Get bitrate of audio @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="151">the bitrate of audio stream.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="147">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_channels"
              c:identifier="clapper_audio_stream_get_channels"
              glib:get-property="channels">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="212">Get number of audio channels in @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="218">the number of audio channels.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="214">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_codec"
              c:identifier="clapper_audio_stream_get_codec"
              glib:get-property="codec">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="122">Get codec used to encode @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="37"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="128">the audio codec of stream
  or %NULL if undetermined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="124">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lang_code"
              c:identifier="clapper_audio_stream_get_lang_code"
              glib:get-property="lang-code">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="234">Get an ISO-639 language code of the @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="240">the language code of audio stream.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="236">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lang_name"
              c:identifier="clapper_audio_stream_get_lang_name"
              glib:get-property="lang-name">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="256">Get language name of the @stream.

This function will try to return a translated string into current
locale if possible, with a fallback to a name extracted from tags.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="49"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="265">the language name of audio stream.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="258">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sample_format"
              c:identifier="clapper_audio_stream_get_sample_format"
              glib:get-property="sample-format">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="167">Get sample format of audio @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="41"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="173">the sample format of stream
  or %NULL if undetermined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="169">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_sample_rate"
              c:identifier="clapper_audio_stream_get_sample_rate"
              glib:get-property="sample-rate">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="190">Get sample rate of audio @stream (in Hz).</doc>
        <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-audio-stream.c"
               line="196">the sample rate of audio stream.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-audio-stream.c"
                 line="192">a #ClapperAudioStream</doc>
            <type name="AudioStream" c:type="ClapperAudioStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bitrate"
                transfer-ownership="none"
                getter="get_bitrate"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="377">Stream bitrate.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="channels"
                transfer-ownership="none"
                getter="get_channels"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="404">Stream number of audio channels.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="codec"
                transfer-ownership="none"
                getter="get_codec"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="368">Stream codec.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lang-code"
                transfer-ownership="none"
                getter="get_lang_code"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="413">Stream language code in ISO-639 format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lang-name"
                transfer-ownership="none"
                getter="get_lang_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="422">Stream language name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sample-format"
                transfer-ownership="none"
                getter="get_sample_format"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="386">Stream sample format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="sample-rate"
                transfer-ownership="none"
                getter="get_sample_rate"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-audio-stream.c"
             line="395">Stream sample rate (in Hz).</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="AudioStreamClass"
            c:type="ClapperAudioStreamClass"
            glib:is-gtype-struct-for="AudioStream">
      <source-position filename="src/lib/clapper/clapper-audio-stream.h"
                       line="35"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="ClapperStreamClass"/>
      </field>
    </record>
    <function-macro name="CHECK_VERSION"
                    c:identifier="CLAPPER_CHECK_VERSION"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-version.h" line="71"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="DISCOVERER_CAST"
                    c:identifier="CLAPPER_DISCOVERER_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Discoverer"
           c:symbol-prefix="discoverer"
           c:type="ClapperDiscoverer"
           parent="Feature"
           glib:type-name="ClapperDiscoverer"
           glib:get-type="clapper_discoverer_get_type"
           glib:type-struct="DiscovererClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
           line="20">An optional Discoverer feature to be added to the player.

#ClapperDiscoverer is a feature that wraps around #GstDiscoverer API
to automatically discover items within [class@Clapper.Queue]. Once media
is scanned, all extra information of it will be filled within media item,
this includes title, duration, chapters, etc.

Please note that media items are also discovered during their playback
by the player itself. #ClapperDiscoverer is useful in situations where
one wants to present to the user an updated media item before its
playback, such as an UI that displays playback queue.

Depending on your application, you can select an optimal
[enum@Clapper.DiscovererDiscoveryMode] that best suits your needs.

Use [const@Clapper.HAVE_DISCOVERER] macro to check if Clapper API
was compiled with this feature.</doc>
      <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                       line="35"/>
      <constructor name="new" c:identifier="clapper_discoverer_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
             line="355">Creates a new #ClapperDiscoverer instance.</doc>
        <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
               line="360">a new #ClapperDiscoverer instance.</doc>
          <type name="Discoverer" c:type="ClapperDiscoverer*"/>
        </return-value>
      </constructor>
      <method name="get_discovery_mode"
              c:identifier="clapper_discoverer_get_discovery_mode"
              glib:get-property="discovery-mode">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
             line="394">Get the [enum@Clapper.DiscovererDiscoveryMode] of @discoverer.</doc>
        <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
               line="400">a currently set #ClapperDiscovererDiscoveryMode.</doc>
          <type name="DiscovererDiscoveryMode"
                c:type="ClapperDiscovererDiscoveryMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="discoverer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
                 line="396">a #ClapperDiscoverer</doc>
            <type name="Discoverer" c:type="ClapperDiscoverer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_discovery_mode"
              c:identifier="clapper_discoverer_set_discovery_mode"
              glib:set-property="discovery-mode">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
             line="371">Set the [enum@Clapper.DiscovererDiscoveryMode] of @discoverer.</doc>
        <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="discoverer" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
                 line="373">a #ClapperDiscoverer</doc>
            <type name="Discoverer" c:type="ClapperDiscoverer*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
                 line="374">a #ClapperDiscovererDiscoveryMode</doc>
            <type name="DiscovererDiscoveryMode"
                  c:type="ClapperDiscovererDiscoveryMode"/>
          </parameter>
        </parameters>
      </method>
      <property name="discovery-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_discovery_mode"
                getter="get_discovery_mode"
                default-value="CLAPPER_DISCOVERER_DISCOVERY_NONCURRENT">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/discoverer/clapper-discoverer.c"
             line="486">Discoverer discovery mode.</doc>
        <type name="DiscovererDiscoveryMode"/>
      </property>
    </class>
    <record name="DiscovererClass"
            c:type="ClapperDiscovererClass"
            glib:is-gtype-struct-for="Discoverer">
      <source-position filename="src/lib/clapper/features/discoverer/clapper-discoverer.h"
                       line="35"/>
      <field name="parent_class">
        <type name="FeatureClass" c:type="ClapperFeatureClass"/>
      </field>
    </record>
    <enumeration name="DiscovererDiscoveryMode"
                 glib:type-name="ClapperDiscovererDiscoveryMode"
                 glib:get-type="clapper_discoverer_discovery_mode_get_type"
                 c:type="ClapperDiscovererDiscoveryMode">
      <member name="always"
              value="0"
              c:identifier="CLAPPER_DISCOVERER_DISCOVERY_ALWAYS"
              glib:nick="always"
              glib:name="CLAPPER_DISCOVERER_DISCOVERY_ALWAYS">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="117">Run discovery for every single media item added to [class@Clapper.Queue].
  This mode is useful when application presents a list of items to select from to the user before playback.
  It will scan every single item in queue, so user can have an updated list of items when selecting what to play.</doc>
      </member>
      <member name="noncurrent"
              value="1"
              c:identifier="CLAPPER_DISCOVERER_DISCOVERY_NONCURRENT"
              glib:nick="noncurrent"
              glib:name="CLAPPER_DISCOVERER_DISCOVERY_NONCURRENT">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="120">Only run discovery on an item if it is not a currently selected item in [class@Clapper.Queue].
  This mode is optimal when application always plays (or at least goes into paused) after selecting item from queue.
  It will skip discovery of such items since they will be discovered by [class@Clapper.Player] anyway.</doc>
      </member>
    </enumeration>
    <function-macro name="ENCODE_VERSION"
                    c:identifier="CLAPPER_ENCODE_VERSION"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-version.h" line="61"/>
      <parameters>
        <parameter name="major">
        </parameter>
        <parameter name="minor">
        </parameter>
        <parameter name="micro">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="FEATURE_CAST"
                    c:identifier="CLAPPER_FEATURE_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-feature.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Feature"
           c:symbol-prefix="feature"
           c:type="ClapperFeature"
           parent="Gst.Object"
           glib:type-name="ClapperFeature"
           glib:get-type="clapper_feature_get_type"
           glib:type-struct="FeatureClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-feature.c"
           line="20">A base class for creating new features for the player.

Feature objects are meant for adding additional functionalities that
are supposed to either act on playback/properties changes and/or change
them themselves due to some external signal/event.

For reacting to playback changes subclass should override this class
virtual functions logic, while for controlling playback implementation
may call [method@Gst.Object.get_parent] to acquire a weak reference on
a parent [class@Clapper.Player] object feature was added to.</doc>
      <source-position filename="src/lib/clapper/clapper-feature.h"
                       line="217"/>
      <virtual-method name="item_updated">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="155">An item in queue got updated. This might be (or not) currently
played item. Implementations can get parent player object
if they want to check that from its queue.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="164"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="157">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="158">a #ClapperMediaItem that was updated</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="mute_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="136">Player mute state was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="143"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="138">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="mute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="139">%TRUE if player is muted, %FALSE otherwise</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="played_item_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="145">New media item started playing. All following events (such as position changes)
will be related to this @item from now on.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="153"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="147">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="148">a #ClapperMediaItem that is now playing</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="position_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="109">Player position was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="111">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="112">a decimal number with current position in seconds</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="prepare">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="63">Prepare feature for operation (optional).

This is different from init() as its called from features thread once
feature is added to the player, so it can already access it parent using
gst_object_get_parent(). If it fails, no other method will be called.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-feature.h"
               line="73">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="65">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="property_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="87">A property of @feature changed its value.

Useful for reconfiguring @feature, since unlike "notify" signal
this is always called from the thread that feature works on and
only after feature was prepared.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="89">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="pspec" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="90">a #GParamSpec</doc>
            <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_cleared">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="196">All items were removed from queue. Note that in such event
@queue_item_removed will NOT be called for each item for performance reasons.
You probably want to implement this function if you also implemented item removal.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="204"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="198">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_item_added">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="166">An item was added to the queue.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="174"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="168">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="169">a #ClapperMediaItem that was added</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="170">position at which @item was placed in queue</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_item_removed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="176">An item was removed from queue.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="184"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="178">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="179">a #ClapperMediaItem that was removed</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="180">position from which @item was removed in queue</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_item_repositioned">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="186">An item changed position within queue.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="194"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="188">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="before" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="189">position from which #ClapperMediaItem was removed</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
          <parameter name="after" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="190">position at which #ClapperMediaItem was inserted after removal</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="queue_progression_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="206">Progression mode of the queue was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="213"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="208">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="209">a #ClapperQueueProgressionMode</doc>
            <type name="QueueProgressionMode"
                  c:type="ClapperQueueProgressionMode"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="speed_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="118">Player speed was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="125"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="120">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="speed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="121">the playback speed multiplier</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="state_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="100">Player state was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="107"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="102">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="state" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="103">a #ClapperPlayerState</doc>
            <type name="PlayerState" c:type="ClapperPlayerState"/>
          </parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="unprepare">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="77">Revert the changes done in @prepare (optional).</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="85"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-feature.h"
               line="83">%TRUE on success, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="79">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="volume_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="127">Player volume was changed.</doc>
        <source-position filename="src/lib/clapper/clapper-feature.h"
                         line="134"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="129">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </instance-parameter>
          <parameter name="volume" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="130">the volume level</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </virtual-method>
      <field name="parent_instance">
        <type name="Gst.Object" c:type="GstObject"/>
      </field>
    </class>
    <record name="FeatureClass"
            c:type="ClapperFeatureClass"
            glib:is-gtype-struct-for="Feature">
      <source-position filename="src/lib/clapper/clapper-feature.h"
                       line="217"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="42">The object class structure.</doc>
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
      <field name="prepare">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="43">Prepare feature for operation (optional).</doc>
        <callback name="prepare">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="75"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="73">%TRUE on success, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="65">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="unprepare">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="44">Revert the changes done in @prepare (optional).</doc>
        <callback name="unprepare">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="85"/>
          <return-value transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-feature.h"
                 line="83">%TRUE on success, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="79">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="property_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="45">A property of @feature changed its value.</doc>
        <callback name="property_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="98"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="89">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="pspec" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="90">a #GParamSpec</doc>
              <type name="GObject.ParamSpec" c:type="GParamSpec*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="state_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="46">Player state was changed.</doc>
        <callback name="state_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="107"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="102">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="state" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="103">a #ClapperPlayerState</doc>
              <type name="PlayerState" c:type="ClapperPlayerState"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="position_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="47">Player position was changed.</doc>
        <callback name="position_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="116"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="111">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="position" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="112">a decimal number with current position in seconds</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="speed_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="48">Player speed was changed.</doc>
        <callback name="speed_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="125"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="120">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="speed" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="121">the playback speed multiplier</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="volume_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="49">Player volume was changed.</doc>
        <callback name="volume_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="134"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="129">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="volume" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="130">the volume level</doc>
              <type name="gdouble" c:type="gdouble"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="mute_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="50">Player mute state was changed.</doc>
        <callback name="mute_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="143"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="138">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="mute" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="139">%TRUE if player is muted, %FALSE otherwise</doc>
              <type name="gboolean" c:type="gboolean"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="played_item_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="51">Currently playing media item got changed.</doc>
        <callback name="played_item_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="153"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="147">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="148">a #ClapperMediaItem that is now playing</doc>
              <type name="MediaItem" c:type="ClapperMediaItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="item_updated">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="52">An item in queue got updated.</doc>
        <callback name="item_updated">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="164"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="157">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="158">a #ClapperMediaItem that was updated</doc>
              <type name="MediaItem" c:type="ClapperMediaItem*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_item_added">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="53">An item was added to the queue.</doc>
        <callback name="queue_item_added">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="174"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="168">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="169">a #ClapperMediaItem that was added</doc>
              <type name="MediaItem" c:type="ClapperMediaItem*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="170">position at which @item was placed in queue</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_item_removed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="54">An item was removed from queue.</doc>
        <callback name="queue_item_removed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="184"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="178">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="item" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="179">a #ClapperMediaItem that was removed</doc>
              <type name="MediaItem" c:type="ClapperMediaItem*"/>
            </parameter>
            <parameter name="index" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="180">position from which @item was removed in queue</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_item_repositioned">
        <callback name="queue_item_repositioned">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="194"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="188">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="before" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="189">position from which #ClapperMediaItem was removed</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
            <parameter name="after" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="190">position at which #ClapperMediaItem was inserted after removal</doc>
              <type name="guint" c:type="guint"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_cleared">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="56">All items were removed from queue.</doc>
        <callback name="queue_cleared">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="204"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="198">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="queue_progression_changed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-feature.h"
             line="57">Progression mode of the queue was changed.</doc>
        <callback name="queue_progression_changed">
          <source-position filename="src/lib/clapper/clapper-feature.h"
                           line="213"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="feature" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="208">a #ClapperFeature</doc>
              <type name="Feature" c:type="ClapperFeature*"/>
            </parameter>
            <parameter name="mode" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-feature.h"
                   line="209">a #ClapperQueueProgressionMode</doc>
              <type name="QueueProgressionMode"
                    c:type="ClapperQueueProgressionMode"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="8">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <constant name="HAVE_DISCOVERER"
              value="true"
              c:type="CLAPPER_HAVE_DISCOVERER">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/clapper-features-availability.h"
           line="26">Check if Clapper was compiled with Discoverer feature.</doc>
      <source-position filename="src/lib/clapper/features/clapper-features-availability.h"
                       line="31"/>
      <type name="gboolean" c:type="gboolean"/>
    </constant>
    <constant name="HAVE_MPRIS" value="true" c:type="CLAPPER_HAVE_MPRIS">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/clapper-features-availability.h"
           line="33">Check if Clapper was compiled with MPRIS feature.</doc>
      <source-position filename="src/lib/clapper/features/clapper-features-availability.h"
                       line="38"/>
      <type name="gboolean" c:type="gboolean"/>
    </constant>
    <constant name="HAVE_SERVER" value="true" c:type="CLAPPER_HAVE_SERVER">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/clapper-features-availability.h"
           line="40">Check if Clapper was compiled with Server feature.</doc>
      <source-position filename="src/lib/clapper/features/clapper-features-availability.h"
                       line="45"/>
      <type name="gboolean" c:type="gboolean"/>
    </constant>
    <constant name="MAJOR_VERSION" value="0" c:type="CLAPPER_MAJOR_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-version.h"
           line="26">Clapper major version component</doc>
      <source-position filename="src/lib/clapper/clapper-version.h" line="31"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MARKER_CAST"
                    c:identifier="CLAPPER_MARKER_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-marker.h" line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MARKER_NO_END"
              value="-1.000000"
              c:type="CLAPPER_MARKER_NO_END">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-marker.h"
           line="41">The value used to indicate that marker does not have an ending time specified</doc>
      <source-position filename="src/lib/clapper/clapper-marker.h" line="46"/>
      <type name="gdouble" c:type="gdouble"/>
    </constant>
    <function-macro name="MEDIA_ITEM_CAST"
                    c:identifier="CLAPPER_MEDIA_ITEM_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-media-item.h"
                       line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="MICRO_VERSION" value="0" c:type="CLAPPER_MICRO_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-version.h"
           line="40">Clapper micro version component</doc>
      <source-position filename="src/lib/clapper/clapper-version.h" line="45"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <constant name="MINOR_VERSION" value="7" c:type="CLAPPER_MINOR_VERSION">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-version.h"
           line="33">Clapper minor version component</doc>
      <source-position filename="src/lib/clapper/clapper-version.h" line="38"/>
      <type name="gint" c:type="gint"/>
    </constant>
    <function-macro name="MPRIS_CAST"
                    c:identifier="CLAPPER_MPRIS_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                       line="34"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Marker"
           c:symbol-prefix="marker"
           c:type="ClapperMarker"
           parent="Gst.Object"
           glib:type-name="ClapperMarker"
           glib:get-type="clapper_marker_get_type"
           glib:type-struct="MarkerClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-marker.c"
           line="20">Represents a point in timeline.

Markers are a convienient way of marking points of interest within a
[class@Clapper.Timeline] of [class@Clapper.MediaItem]. Use them
to indicate certain areas on the timeline.

Markers are reference counted immutable objects. Once a marker is created
it can only be inserted into a single [class@Clapper.Timeline] at a time.

Please note that markers are independent of [property@Clapper.MediaItem:duration]
and applications should not assume that all markers must have start/end times
lower or equal the item duration. This is not the case in e.g. live streams
where duration is unknown, but markers are still allowed to mark entries
(like EPG titles for example).

Remember that [class@Clapper.Player] will also automatically insert certain
markers extracted from media such as video chapters. Clapper will never
"touch" the ones created by the application. If you want to differentiate
your own markers, applications can define and create markers with one of
the custom types from [enum@Clapper.MarkerType] enum.

Example:

```c
#define MY_APP_MARKER (CLAPPER_MARKER_TYPE_CUSTOM_1)

ClapperMarker *marker = clapper_marker_new (MY_APP_MARKER, title, start, end);
```

```c
ClapperMarkerType marker_type = clapper_marker_get_marker_type (marker);

if (marker_type == MY_APP_MARKER) {
  // Do something with your custom marker
}
```</doc>
      <source-position filename="src/lib/clapper/clapper-marker.h" line="39"/>
      <constructor name="new" c:identifier="clapper_marker_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="93">Creates a new #ClapperMarker with given params.

It is considered a programmer error trying to set an ending
point that is before the starting one. If end is unknown or
not defined a special [const@Clapper.MARKER_NO_END] value
should be used.</doc>
        <source-position filename="src/lib/clapper/clapper-marker.h"
                         line="48"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-marker.c"
               line="107">a new #ClapperMarker.</doc>
          <type name="Marker" c:type="ClapperMarker*"/>
        </return-value>
        <parameters>
          <parameter name="marker_type" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="95">a #ClapperMarkerType</doc>
            <type name="MarkerType" c:type="ClapperMarkerType"/>
          </parameter>
          <parameter name="title"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="96">title of the marker</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="start" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="97">a start position of the marker</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="end" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="98">an end position of the marker or [const@Clapper.MARKER_NO_END] if none</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_end"
              c:identifier="clapper_marker_get_end"
              glib:get-property="end">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="185">Get the end position (in seconds) of @marker.</doc>
        <source-position filename="src/lib/clapper/clapper-marker.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-marker.c"
               line="191">marker end.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="187">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_marker_type"
              c:identifier="clapper_marker_get_marker_type"
              glib:get-property="marker-type">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="137">Get the #ClapperMarkerType of @marker.</doc>
        <source-position filename="src/lib/clapper/clapper-marker.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-marker.c"
               line="143">type of marker.</doc>
          <type name="MarkerType" c:type="ClapperMarkerType"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="139">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_start"
              c:identifier="clapper_marker_get_start"
              glib:get-property="start">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="169">Get the start position (in seconds) of @marker.</doc>
        <source-position filename="src/lib/clapper/clapper-marker.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-marker.c"
               line="175">marker start.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="171">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="clapper_marker_get_title"
              glib:get-property="title">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="153">Get the title of @marker.</doc>
        <source-position filename="src/lib/clapper/clapper-marker.h"
                         line="52"/>
        <return-value transfer-ownership="none" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-marker.c"
               line="159">the marker title.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-marker.c"
                 line="155">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="end"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_end"
                default-value="-1.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="328">Ending time of marker.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="marker-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_marker_type"
                default-value="CLAPPER_MARKER_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="301">Type of stream.</doc>
        <type name="MarkerType"/>
      </property>
      <property name="start"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_start"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="319">Starting time of marker.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="title"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-marker.c"
             line="310">Title of marker.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="MarkerClass"
            c:type="ClapperMarkerClass"
            glib:is-gtype-struct-for="Marker">
      <source-position filename="src/lib/clapper/clapper-marker.h" line="39"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
    </record>
    <enumeration name="MarkerType"
                 glib:type-name="ClapperMarkerType"
                 glib:get-type="clapper_marker_type_get_type"
                 c:type="ClapperMarkerType">
      <member name="unknown"
              value="0"
              c:identifier="CLAPPER_MARKER_TYPE_UNKNOWN"
              glib:nick="unknown"
              glib:name="CLAPPER_MARKER_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="81">Unknown marker type.</doc>
      </member>
      <member name="title"
              value="1"
              c:identifier="CLAPPER_MARKER_TYPE_TITLE"
              glib:nick="title"
              glib:name="CLAPPER_MARKER_TYPE_TITLE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="82">A title marker in timeline.</doc>
      </member>
      <member name="chapter"
              value="2"
              c:identifier="CLAPPER_MARKER_TYPE_CHAPTER"
              glib:nick="chapter"
              glib:name="CLAPPER_MARKER_TYPE_CHAPTER">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="83">A chapter marker in timeline.</doc>
      </member>
      <member name="track"
              value="3"
              c:identifier="CLAPPER_MARKER_TYPE_TRACK"
              glib:nick="track"
              glib:name="CLAPPER_MARKER_TYPE_TRACK">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="84">A track marker in timeline.</doc>
      </member>
      <member name="custom_1"
              value="101"
              c:identifier="CLAPPER_MARKER_TYPE_CUSTOM_1"
              glib:nick="custom-1"
              glib:name="CLAPPER_MARKER_TYPE_CUSTOM_1">
      </member>
      <member name="custom_2"
              value="102"
              c:identifier="CLAPPER_MARKER_TYPE_CUSTOM_2"
              glib:nick="custom-2"
              glib:name="CLAPPER_MARKER_TYPE_CUSTOM_2">
      </member>
      <member name="custom_3"
              value="103"
              c:identifier="CLAPPER_MARKER_TYPE_CUSTOM_3"
              glib:nick="custom-3"
              glib:name="CLAPPER_MARKER_TYPE_CUSTOM_3">
      </member>
    </enumeration>
    <class name="MediaItem"
           c:symbol-prefix="media_item"
           c:type="ClapperMediaItem"
           parent="Gst.Object"
           glib:type-name="ClapperMediaItem"
           glib:get-type="clapper_media_item_get_type"
           glib:type-struct="MediaItemClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-media-item.c"
           line="20">Represents a media item.

A newly created media item must be added to player [class@Clapper.Queue]
first in order to be played.</doc>
      <source-position filename="src/lib/clapper/clapper-media-item.h"
                       line="38"/>
      <constructor name="new" c:identifier="clapper_media_item_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="77">Creates new #ClapperMediaItem from URI.

Use one of the URI protocols supported by plugins in #GStreamer
installation. For local files you can use either "file" protocol
or [ctor@Clapper.MediaItem.new_from_file] method.

It is considered a programmer error trying to create new media item from
invalid URI. If URI is valid, but unsupported by installed plugins on user
system, [class@Clapper.Player] will emit a [signal@Clapper.Player::missing-plugin]
signal upon playback.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="40"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="92">a new #ClapperMediaItem.</doc>
          <type name="MediaItem" c:type="ClapperMediaItem*"/>
        </return-value>
        <parameters>
          <parameter name="uri" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="79">a media URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <constructor name="new_from_file"
                   c:identifier="clapper_media_item_new_from_file">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="117">Creates new #ClapperMediaItem from #GFile.

Same as [ctor@Clapper.MediaItem.new], but uses a [iface@Gio.File]
for convenience in some situations instead of an URI.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="126">a new #ClapperMediaItem.</doc>
          <type name="MediaItem" c:type="ClapperMediaItem*"/>
        </return-value>
        <parameters>
          <parameter name="file" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="119">a #GFile</doc>
            <type name="Gio.File" c:type="GFile*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_container_format"
              c:identifier="clapper_media_item_get_container_format"
              glib:get-property="container-format">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="297">Get media item container format.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="54"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="303">media container format.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="299">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_duration"
              c:identifier="clapper_media_item_get_duration"
              glib:get-property="duration">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="338">Get media item duration as decimal number in seconds.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="344">media duration.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="340">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_id"
              c:identifier="clapper_media_item_get_id"
              glib:get-property="id">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="144">Get the unique ID of #ClapperMediaItem.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="150">an ID of #ClapperMediaItem.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="146">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_suburi"
              c:identifier="clapper_media_item_get_suburi"
              glib:get-property="suburi">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="207">Get the additional URI of #ClapperMediaItem.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="213">an additional URI of #ClapperMediaItem.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="209">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_timeline"
              c:identifier="clapper_media_item_get_timeline"
              glib:get-property="timeline">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="360">Get the [class@Clapper.Timeline] assosiated with @item.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="366">a #ClapperTimeline of item.</doc>
          <type name="Timeline" c:type="ClapperTimeline*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="362">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="clapper_media_item_get_title"
              glib:get-property="title">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="250">Get media item title.

The title can be either text detected by media discovery once it
completes. Otherwise whenever possible this will try to return a title
extracted from media URI e.g. basename without extension for local files.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="260">media title.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="252">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_uri"
              c:identifier="clapper_media_item_get_uri"
              glib:get-property="uri">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="160">Get the URI of #ClapperMediaItem.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-media-item.c"
               line="166">an URI of #ClapperMediaItem.</doc>
          <type name="utf8" c:type="const gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="162">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_suburi"
              c:identifier="clapper_media_item_set_suburi"
              glib:set-property="suburi">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="176">Set the additional URI of #ClapperMediaItem.

This is typically used to add an external subtitles URI to the @item.</doc>
        <source-position filename="src/lib/clapper/clapper-media-item.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="178">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </instance-parameter>
          <parameter name="suburi" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-media-item.c"
                 line="179">an additional URI</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <property name="container-format"
                transfer-ownership="none"
                getter="get_container_format"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="613">Media container format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="duration"
                transfer-ownership="none"
                getter="get_duration"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="622">Media duration as a decimal number in seconds.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="id"
                transfer-ownership="none"
                getter="get_id"
                default-value="4294967295">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="577">Media Item ID.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="suburi"
                writable="1"
                transfer-ownership="none"
                setter="set_suburi"
                getter="get_suburi"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="595">Media additional URI.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="timeline"
                transfer-ownership="none"
                getter="get_timeline">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="631">Media timeline.</doc>
        <type name="Timeline"/>
      </property>
      <property name="title"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="604">Media title.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="uri"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_uri"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-media-item.c"
             line="586">Media URI.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="MediaItemClass"
            c:type="ClapperMediaItemClass"
            glib:is-gtype-struct-for="MediaItem">
      <source-position filename="src/lib/clapper/clapper-media-item.h"
                       line="38"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
    </record>
    <class name="Mpris"
           c:symbol-prefix="mpris"
           c:type="ClapperMpris"
           parent="Feature"
           glib:type-name="ClapperMpris"
           glib:get-type="clapper_mpris_get_type"
           glib:type-struct="MprisClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/mpris/clapper-mpris.c"
           line="20">An optional `MPRIS` feature to add to the player.

Not every OS supports `MPRIS`. Use [const@Clapper.HAVE_MPRIS] macro
to check if Clapper API was compiled with this feature.</doc>
      <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                       line="36"/>
      <constructor name="new" c:identifier="clapper_mpris_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1341">Creates a new #ClapperMpris instance.</doc>
        <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                         line="38"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/mpris/clapper-mpris.c"
               line="1349">a new #ClapperMpris instance.</doc>
          <type name="Mpris" c:type="ClapperMpris*"/>
        </return-value>
        <parameters>
          <parameter name="own_name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1343">an unique DBus name with "org.mpris.MediaPlayer2." prefix</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="identity" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1344">a media player friendly name</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
          <parameter name="desktop_entry"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1345">desktop file basename (without ".desktop" extension)</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </constructor>
      <method name="get_fallback_art_url"
              c:identifier="clapper_mpris_get_fallback_art_url"
              glib:get-property="fallback-art-url">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1432">Get fallback art URL earlier set by user.</doc>
        <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                         line="46"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/mpris/clapper-mpris.c"
               line="1438">fallback art URL.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="mpris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1434">a #ClapperMpris</doc>
            <type name="Mpris" c:type="ClapperMpris*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_queue_controllable"
              c:identifier="clapper_mpris_get_queue_controllable"
              glib:get-property="queue-controllable">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1394">Get whether remote `MPRIS` clients can control [class@Clapper.Queue].</doc>
        <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                         line="42"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/mpris/clapper-mpris.c"
               line="1400">%TRUE if control over #ClapperQueue is allowed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="mpris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1396">a #ClapperMpris</doc>
            <type name="Mpris" c:type="ClapperMpris*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_fallback_art_url"
              c:identifier="clapper_mpris_set_fallback_art_url"
              glib:set-property="fallback-art-url">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1410">Set fallback artwork to show when media does not provide one.</doc>
        <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mpris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1412">a #ClapperMpris</doc>
            <type name="Mpris" c:type="ClapperMpris*"/>
          </instance-parameter>
          <parameter name="art_url"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1413">an art URL</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_controllable"
              c:identifier="clapper_mpris_set_queue_controllable"
              glib:set-property="queue-controllable">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1367">Set whether remote MPRIS clients can control #ClapperQueue.

This includes ability to open new URIs, adding/removing
items from the queue and selecting current item for
playback remotely using MPRIS interface.

You probably want to keep this disabled if your application
is supposed to manage what is played now and not MPRIS client.</doc>
        <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                         line="40"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="mpris" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1369">a #ClapperMpris</doc>
            <type name="Mpris" c:type="ClapperMpris*"/>
          </instance-parameter>
          <parameter name="controllable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/mpris/clapper-mpris.c"
                 line="1370">if #ClapperQueue should be controllable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="desktop-entry"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1631">The basename of an installed .desktop file with the ".desktop" extension stripped.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fallback-art-url"
                writable="1"
                transfer-ownership="none"
                setter="set_fallback_art_url"
                getter="get_fallback_art_url"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1649">Fallback artwork to show when media does not provide one.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="identity"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1620">A friendly name to identify the media player.

Example: "My Player"</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="own-name"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1606">DBus name to own on connection.

Must be written as a reverse DNS format starting with "org.mpris.MediaPlayer2." prefix.
Each #ClapperMpris instance running on the same system must have an unique.

Example: "org.mpris.MediaPlayer2.MyPlayer1"</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="queue-controllable"
                writable="1"
                transfer-ownership="none"
                setter="set_queue_controllable"
                getter="get_queue_controllable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/mpris/clapper-mpris.c"
             line="1640">Whether remote MPRIS clients can control #ClapperQueue.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
    </class>
    <record name="MprisClass"
            c:type="ClapperMprisClass"
            glib:is-gtype-struct-for="Mpris">
      <source-position filename="src/lib/clapper/features/mpris/clapper-mpris.h"
                       line="36"/>
      <field name="parent_class">
        <type name="FeatureClass" c:type="ClapperFeatureClass"/>
      </field>
    </record>
    <function-macro name="PLAYER_CAST"
                    c:identifier="CLAPPER_PLAYER_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-player.h" line="38"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Player"
           c:symbol-prefix="player"
           c:type="ClapperPlayer"
           parent="ThreadedObject"
           glib:type-name="ClapperPlayer"
           glib:get-type="clapper_player_get_type"
           glib:type-struct="PlayerClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-player.c"
           line="20">The media player object used for playback.

#ClapperPlayer was written in an easy to use way, so no special GStreamer
experience is needed to get started with making various playback applications.

Scheduling media for playback is done using a [class@Clapper.Queue] upon which
player operates.

Player uses `GStreamer` internally and handles playback on a separate thread, while
serializing all events/commands between player and the thread it was created upon
(usually main app thread). This makes it very easy to integrate with UI toolkits
that operate on a single thread like (but not limited to) GTK.

To listen for property changes, you can connect to property "notify" signal.</doc>
      <source-position filename="src/lib/clapper/clapper-player.h" line="40"/>
      <constructor name="new" c:identifier="clapper_player_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="913">Creates a new #ClapperPlayer instance.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="42"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="918">a new #ClapperPlayer instance.</doc>
          <type name="Player" c:type="ClapperPlayer*"/>
        </return-value>
      </constructor>
      <method name="add_feature" c:identifier="clapper_player_add_feature">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1741">Add another #ClapperFeature to the player.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="126"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1743">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="feature" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1744">a #ClapperFeature</doc>
            <type name="Feature" c:type="ClapperFeature*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_audio_enabled"
              c:identifier="clapper_player_get_audio_enabled"
              glib:get-property="audio-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1449">Get whether audio stream is enabled.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="98"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1455">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1451">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_filter"
              c:identifier="clapper_player_get_audio_filter"
              glib:get-property="audio-filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1337">Get #GstElement used as audio filter.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="86"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1343">#GstElement set as audio filter.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1339">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_offset"
              c:identifier="clapper_player_get_audio_offset"
              glib:get-property="audio-offset">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1533">Get the currently set audio stream offset.

The returned value is in seconds as a decimal number.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="106"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1541">the audio stream offset.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1535">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_sink"
              c:identifier="clapper_player_get_audio_sink"
              glib:get-property="audio-sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1283">Get #GstElement used as audio sink.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="78"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1289">#GstElement set as audio sink.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1285">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_audio_streams"
              c:identifier="clapper_player_get_audio_streams"
              glib:get-property="audio-streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="966">Get a list of audio streams within media item.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="972">a #ClapperStreamList of audio #ClapperStream.</doc>
          <type name="StreamList" c:type="ClapperStreamList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="968">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_autoplay"
              c:identifier="clapper_player_get_autoplay"
              glib:get-property="autoplay">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1027">Get the autoplay value.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1033">%TRUE if autoplay is enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1029">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_audio_decoder"
              c:identifier="clapper_player_get_current_audio_decoder"
              glib:get-property="current-audio-decoder">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1374">Get #GstElement currently used as audio decoder.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="90"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1380">#GstElement currently used as audio decoder.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1376">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_video_decoder"
              c:identifier="clapper_player_get_current_video_decoder"
              glib:get-property="current-video-decoder">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1351">Get #GstElement currently used as video decoder.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="88"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1357">#GstElement currently used as video decoder.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1353">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_mute"
              c:identifier="clapper_player_get_mute"
              glib:get-property="mute">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1115">Get the mute state of the player.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="62"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1121">%TRUE if player is muted, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1117">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_position"
              c:identifier="clapper_player_get_position"
              glib:get-property="position">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1049">Get the current player playback position.

The returned value is in seconds as a decimal number.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1057">the position of the player.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1051">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_queue"
              c:identifier="clapper_player_get_queue"
              glib:get-property="queue">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="931">Get the #ClapperQueue of the player.

The queue belongs to the player and can be accessed for as long
as #ClapperPlayer object instance it belongs to is alive.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="44"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="940">the #ClapperQueue of the player.</doc>
          <type name="Queue" c:type="ClapperQueue*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="933">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_speed"
              c:identifier="clapper_player_get_speed"
              glib:get-property="speed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1194">Get the speed of the player used for playback.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="70"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1200">the playback speed multiplier.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1196">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_state"
              c:identifier="clapper_player_get_state"
              glib:get-property="state">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1073">Get the current #ClapperPlayerState.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="58"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1079">the #ClapperPlayerState of the player.</doc>
          <type name="PlayerState" c:type="ClapperPlayerState"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1075">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_font_desc"
              c:identifier="clapper_player_get_subtitle_font_desc"
              glib:get-property="subtitle-font-desc">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1627">Get the currently set font description used for subtitle stream rendering.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="114"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1633">the subtitle font description.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1629">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_offset"
              c:identifier="clapper_player_get_subtitle_offset"
              glib:get-property="subtitle-offset">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1582">Get the currently set subtitle stream offset.

The returned value is in seconds as a decimal number.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="110"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1590">the subtitle stream offset.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1584">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitle_streams"
              c:identifier="clapper_player_get_subtitle_streams"
              glib:get-property="subtitle-streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="982">Get a list of subtitle streams within media item.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="50"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="988">a #ClapperStreamList of subtitle #ClapperStream.</doc>
          <type name="StreamList" c:type="ClapperStreamList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="984">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_subtitles_enabled"
              c:identifier="clapper_player_get_subtitles_enabled"
              glib:get-property="subtitles-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1486">Get whether subtitles are to be shown when available.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="102"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1492">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1488">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_video_enabled"
              c:identifier="clapper_player_get_video_enabled"
              glib:get-property="video-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1412">Get whether video stream is enabled.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="94"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1418">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1414">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_video_filter"
              c:identifier="clapper_player_get_video_filter"
              glib:get-property="video-filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1310">Get #GstElement used as video filter.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="82"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1316">#GstElement set as video filter.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1312">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_video_sink"
              c:identifier="clapper_player_get_video_sink"
              glib:get-property="video-sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1256">Get #GstElement used as video sink.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="74"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1262">#GstElement set as video sink.</doc>
          <type name="Gst.Element" c:type="GstElement*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1258">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_video_streams"
              c:identifier="clapper_player_get_video_streams"
              glib:get-property="video-streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="950">Get a list of video streams within media item.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="956">a #ClapperStreamList of video #ClapperStream.</doc>
          <type name="StreamList" c:type="ClapperStreamList*"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="952">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_volume"
              c:identifier="clapper_player_get_volume"
              glib:get-property="volume">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1156">Get the volume of the player.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="66"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-player.c"
               line="1162">current volume level.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1158">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="pause" c:identifier="clapper_player_pause">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1664">Pause the playback of current media item.

This function will queue a request for the underlaying #GStreamer
pipeline to go into `PAUSED` state, thus can also be used on a not
yet started video to go into `PAUSED` state first.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="118"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1666">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="play" c:identifier="clapper_player_play">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1647">Either start or resume the playback of current media item.

This function will queue a request for the underlaying #GStreamer
pipeline to go into `PLAYING` state.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="116"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1649">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="seek" c:identifier="clapper_player_seek">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1699">Request the player to perform a seek operation.

This function will use [enum@Clapper.PlayerSeekMethod.NORMAL] as a
seeking method. If you wish to specify what method to use per seeking
request, use [method@Clapper.Player.seek_custom] instead.

Note that seeking requests are per selected media item. Seeking
requests will be ignored if player is stopped. You need to at least
call [method@Clapper.Player.pause] before seeking and then your requested
seek will be handled if item could be played.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="122"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1701">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1702">a decimal number with position to seek to (in seconds)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="seek_custom" c:identifier="clapper_player_seek_custom">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1721">Request the player to perform a seek operation.

Same as [method@Clapper.Player.seek], but also allows to specify
[enum@Clapper.PlayerSeekMethod] to use for seek.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="124"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1723">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="position" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1724">a decimal number with position to seek to (in seconds)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
          <parameter name="method" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1725">a #ClapperPlayerSeekMethod</doc>
            <type name="PlayerSeekMethod" c:type="ClapperPlayerSeekMethod"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_audio_enabled"
              c:identifier="clapper_player_set_audio_enabled"
              glib:set-property="audio-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1434">Set whether enable audio stream.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="96"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1436">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1437">whether enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_audio_filter"
              c:identifier="clapper_player_set_audio_filter"
              glib:set-property="audio-filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1324">Set #GstElement to be used as audio filter.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="84"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1326">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="element"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1327">a #GstElement or %NULL for none.</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_audio_offset"
              c:identifier="clapper_player_set_audio_offset"
              glib:set-property="audio-offset">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1508">Set synchronisation offset between the audio stream and video.

Positive values make the audio ahead of the video and negative
values make the audio go behind the video.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="104"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1510">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1511">a decimal audio offset (in seconds)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_audio_sink"
              c:identifier="clapper_player_set_audio_sink"
              glib:set-property="audio-sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1270">Set #GstElement to be used as audio sink.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="76"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1272">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="element"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1273">a #GstElement or %NULL to use default.</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_autoplay"
              c:identifier="clapper_player_set_autoplay"
              glib:set-property="autoplay">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="998">Set the autoplay state of the player.

When autoplay is enabled, player will always try to start
playback after current media item changes. When disabled
current playback state is preserved when changing items.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="52"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1000">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1001">%TRUE to enable autoplay, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_mute"
              c:identifier="clapper_player_set_mute"
              glib:set-property="mute">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1095">Set the mute state of the player.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="60"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1097">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="mute" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1098">%TRUE if player should be muted, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_speed"
              c:identifier="clapper_player_set_speed"
              glib:set-property="speed">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1178">Set the speed multiplier of the player.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="68"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1180">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="speed" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1181">the playback speed multiplier.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_font_desc"
              c:identifier="clapper_player_set_subtitle_font_desc"
              glib:set-property="subtitle-font-desc">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1606">Set Pango font description to be used for subtitle stream rendering.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="112"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1608">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="font_desc" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1609">Font description</doc>
            <type name="utf8" c:type="const gchar*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitle_offset"
              c:identifier="clapper_player_set_subtitle_offset"
              glib:set-property="subtitle-offset">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1557">Set synchronisation offset between the subtitle stream and video.

Positive values make the subtitles ahead of the video and negative
values make the subtitles go behind the video.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="108"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1559">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="offset" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1560">a decimal subtitle stream offset (in seconds)</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_subtitles_enabled"
              c:identifier="clapper_player_set_subtitles_enabled"
              glib:set-property="subtitles-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1471">Set whether subtitles should be shown if any.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="100"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1473">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1474">whether enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_video_enabled"
              c:identifier="clapper_player_set_video_enabled"
              glib:set-property="video-enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1397">Set whether enable video stream.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="92"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1399">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1400">whether enabled</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_video_filter"
              c:identifier="clapper_player_set_video_filter"
              glib:set-property="video-filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1297">Set #GstElement to be used as video filter.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="80"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1299">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="element"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1300">a #GstElement or %NULL for none.</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_video_sink"
              c:identifier="clapper_player_set_video_sink"
              glib:set-property="video-sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1243">Set #GstElement to be used as video sink.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="72"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1245">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="element"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1246">a #GstElement or %NULL to use default.</doc>
            <type name="Gst.Element" c:type="GstElement*"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_volume"
              c:identifier="clapper_player_set_volume"
              glib:set-property="volume">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1137">Set the volume of the player.

The value should be within 0 - 2.0 range, where 1.0 is 100%
volume and anything above results with an overamplification.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="64"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1139">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
          <parameter name="volume" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1140">the volume level.</doc>
            <type name="gdouble" c:type="gdouble"/>
          </parameter>
        </parameters>
      </method>
      <method name="stop" c:identifier="clapper_player_stop">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="1682">Stop the playback of current media item.

This function will queue a request for the underlaying #GStreamer
pipeline to go into `READY` state.</doc>
        <source-position filename="src/lib/clapper/clapper-player.h"
                         line="120"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="player" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="1684">a #ClapperPlayer</doc>
            <type name="Player" c:type="ClapperPlayer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="audio-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_audio_enabled"
                getter="get_audio_enabled"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2236">Whether audio stream is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="audio-filter"
                writable="1"
                transfer-ownership="none"
                setter="set_audio_filter"
                getter="get_audio_filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2200">Optional audio filter to use (none by default).</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="audio-offset"
                writable="1"
                transfer-ownership="none"
                setter="set_audio_offset"
                getter="get_audio_offset"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2254">Audio stream offset relative to video.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="audio-sink"
                writable="1"
                transfer-ownership="none"
                setter="set_audio_sink"
                getter="get_audio_sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2182">Audio sink to use (autoaudiosink by default).</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="audio-streams"
                transfer-ownership="none"
                getter="get_audio_streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2097">List of currently available audio streams.</doc>
        <type name="StreamList"/>
      </property>
      <property name="autoplay"
                writable="1"
                transfer-ownership="none"
                setter="set_autoplay"
                getter="get_autoplay"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2115">Always try to start playback after media item changes.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="current-audio-decoder"
                transfer-ownership="none"
                getter="get_current_audio_decoder">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2218">Currently used audio decoder.</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="current-video-decoder"
                transfer-ownership="none"
                getter="get_current_video_decoder">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2209">Currently used video decoder.</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="mute"
                writable="1"
                transfer-ownership="none"
                setter="set_mute"
                getter="get_mute"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2151">Mute audio without changing volume.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="position"
                transfer-ownership="none"
                getter="get_position"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2124">Current playback position as a decimal number in seconds.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="queue" transfer-ownership="none" getter="get_queue">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2079">Clapper playback queue.</doc>
        <type name="Queue"/>
      </property>
      <property name="speed"
                writable="1"
                transfer-ownership="none"
                setter="set_speed"
                getter="get_speed"
                default-value="1.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2133">Current playback speed.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="state"
                transfer-ownership="none"
                getter="get_state"
                default-value="CLAPPER_PLAYER_STATE_STOPPED">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2142">Current playback state.</doc>
        <type name="PlayerState"/>
      </property>
      <property name="subtitle-font-desc"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_font_desc"
                getter="get_subtitle_font_desc"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2272">Subtitle stream font description.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="subtitle-offset"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitle_offset"
                getter="get_subtitle_offset"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2263">Subtitle stream offset relative to video.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="subtitle-streams"
                transfer-ownership="none"
                getter="get_subtitle_streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2106">List of currently available subtitle streams.</doc>
        <type name="StreamList"/>
      </property>
      <property name="subtitles-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_subtitles_enabled"
                getter="get_subtitles_enabled"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2245">Whether subtitles stream is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="video-enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_video_enabled"
                getter="get_video_enabled"
                default-value="TRUE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2227">Whether video stream is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="video-filter"
                writable="1"
                transfer-ownership="none"
                setter="set_video_filter"
                getter="get_video_filter">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2191">Optional video filter to use (none by default).</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="video-sink"
                writable="1"
                transfer-ownership="none"
                setter="set_video_sink"
                getter="get_video_sink">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2173">Video sink to use (autovideosink by default).</doc>
        <type name="Gst.Element"/>
      </property>
      <property name="video-streams"
                transfer-ownership="none"
                getter="get_video_streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2088">List of currently available video streams.</doc>
        <type name="StreamList"/>
      </property>
      <property name="volume"
                writable="1"
                transfer-ownership="none"
                setter="set_volume"
                getter="get_volume"
                default-value="1.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2160">Current volume as a decimal number (1.0 = 100%).

Note that #ClapperPlayer uses a CUBIC volume scale, meaning
that this property value reflects human hearing level and can
be easily bound to volume sliders as-is.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <glib:signal name="error" when="last" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2322">These are normal error messages. Upon emitting this signal,
playback will stop due to the error.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2325">a #GError</doc>
            <type name="GLib.Error"/>
          </parameter>
          <parameter name="debug_info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2326">an additional debug message.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="missing-plugin"
                   when="last"
                   no-recurse="1"
                   no-hooks="1">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2291">A #GStreamer plugin or one of its features needed for playback is missing.

The @description and @installer_detail can be used to present the user more info
about what is missing and prompt him to install it with an external installer.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="name" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2294">a localised string describing the missing feature, for use in
  error dialogs and the like.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
          <parameter name="installer_detail"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2296">a string containing all the details about the missing
  element to be passed to an external installer called via either
  gst_install_plugins_async() or gst_install_plugins_sync() function.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
      <glib:signal name="seek-done" when="last" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2281">A seeking operation has finished. Player is now at playback position after seek.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
      </glib:signal>
      <glib:signal name="warning" when="last" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-player.c"
             line="2309">These are some usually more minor error messages that should
be treated like warnings. Should not generally prevent/stop playback.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2312">a #GError</doc>
            <type name="GLib.Error"/>
          </parameter>
          <parameter name="debug_info"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-player.c"
                 line="2313">an additional debug message.</doc>
            <type name="utf8" c:type="gchar*"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="PlayerClass"
            c:type="ClapperPlayerClass"
            glib:is-gtype-struct-for="Player">
      <source-position filename="src/lib/clapper/clapper-player.h" line="40"/>
      <field name="parent_class">
        <type name="ThreadedObjectClass" c:type="ClapperThreadedObjectClass"/>
      </field>
    </record>
    <enumeration name="PlayerSeekMethod"
                 glib:type-name="ClapperPlayerSeekMethod"
                 glib:get-type="clapper_player_seek_method_get_type"
                 c:type="ClapperPlayerSeekMethod">
      <member name="accurate"
              value="0"
              c:identifier="CLAPPER_PLAYER_SEEK_METHOD_ACCURATE"
              glib:nick="accurate"
              glib:name="CLAPPER_PLAYER_SEEK_METHOD_ACCURATE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="47">Seek to exact position (slow).</doc>
      </member>
      <member name="normal"
              value="1"
              c:identifier="CLAPPER_PLAYER_SEEK_METHOD_NORMAL"
              glib:nick="normal"
              glib:name="CLAPPER_PLAYER_SEEK_METHOD_NORMAL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="48">Seek to approximated position.</doc>
      </member>
      <member name="fast"
              value="2"
              c:identifier="CLAPPER_PLAYER_SEEK_METHOD_FAST"
              glib:nick="fast"
              glib:name="CLAPPER_PLAYER_SEEK_METHOD_FAST">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="49">Seek to position of nearest keyframe (fast).</doc>
      </member>
    </enumeration>
    <enumeration name="PlayerState"
                 glib:type-name="ClapperPlayerState"
                 glib:get-type="clapper_player_state_get_type"
                 c:type="ClapperPlayerState">
      <member name="stopped"
              value="0"
              c:identifier="CLAPPER_PLAYER_STATE_STOPPED"
              glib:nick="stopped"
              glib:name="CLAPPER_PLAYER_STATE_STOPPED">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="32">Player is stopped.</doc>
      </member>
      <member name="buffering"
              value="1"
              c:identifier="CLAPPER_PLAYER_STATE_BUFFERING"
              glib:nick="buffering"
              glib:name="CLAPPER_PLAYER_STATE_BUFFERING">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="33">Player is buffering.</doc>
      </member>
      <member name="paused"
              value="2"
              c:identifier="CLAPPER_PLAYER_STATE_PAUSED"
              glib:nick="paused"
              glib:name="CLAPPER_PLAYER_STATE_PAUSED">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="34">Player is paused.</doc>
      </member>
      <member name="playing"
              value="3"
              c:identifier="CLAPPER_PLAYER_STATE_PLAYING"
              glib:nick="playing"
              glib:name="CLAPPER_PLAYER_STATE_PLAYING">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="35">Player is playing.</doc>
      </member>
    </enumeration>
    <function-macro name="QUEUE_CAST"
                    c:identifier="CLAPPER_QUEUE_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-queue.h" line="36"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="QUEUE_INVALID_POSITION"
              value="4294967295"
              c:type="CLAPPER_QUEUE_INVALID_POSITION">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-queue.h"
           line="40">The value used to refer to an invalid position in a #ClapperQueue</doc>
      <source-position filename="src/lib/clapper/clapper-queue.h" line="45"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <class name="Queue"
           c:symbol-prefix="queue"
           c:type="ClapperQueue"
           parent="Gst.Object"
           glib:type-name="ClapperQueue"
           glib:get-type="clapper_queue_get_type"
           glib:type-struct="QueueClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-queue.c"
           line="20">A queue of media to be played.</doc>
      <source-position filename="src/lib/clapper/clapper-queue.h" line="38"/>
      <implements name="Gio.ListModel"/>
      <method name="add_item" c:identifier="clapper_queue_add_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="433">Add another #ClapperMediaItem to the end of queue.

If item is already in queue, this function will do nothing,
so it is safe to call multiple times if unsure.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="47"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="435">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="436">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="clear" c:identifier="clapper_queue_clear">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="652">Removes all media items from the queue.

If queue is empty, this function will do nothing,
so it is safe to call multiple times if unsure.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="59"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="654">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="find_item" c:identifier="clapper_queue_find_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="904">Get the index of #ClapperMediaItem within #ClapperQueue.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="77"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="913">%TRUE if @item is one of the elements of queue.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="906">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="907">a #ClapperMediaItem to search for</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
          <parameter name="index"
                     direction="out"
                     caller-allocates="0"
                     transfer-ownership="full"
                     optional="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="908">return location for the index of
  the element, if found</doc>
            <type name="guint" c:type="guint*"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_current_index"
              c:identifier="clapper_queue_get_current_index"
              glib:get-property="current-index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="857">Get index of the currently selected #ClapperMediaItem.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="73"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="863">Current item index or [const@Clapper.QUEUE_INVALID_POSITION]
  when nothing is selected.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="859">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_item"
              c:identifier="clapper_queue_get_current_item"
              glib:get-property="current-item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="830">Get the currently selected #ClapperMediaItem.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="71"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="836">The current #ClapperMediaItem.</doc>
          <type name="MediaItem" c:type="ClapperMediaItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="832">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_gapless"
              c:identifier="clapper_queue_get_gapless"
              glib:get-property="gapless">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1061">Get if #ClapperQueue is set to use gapless progression.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="87"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="1067">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1063">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_instant"
              c:identifier="clapper_queue_get_instant"
              glib:get-property="instant">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1119">Get if #ClapperQueue is set to use instant media item changes.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="91"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="1125">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1121">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_item"
              c:identifier="clapper_queue_get_item"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="807">Get the #ClapperMediaItem at index.

This behaves the same as [method@Gio.ListModel.get_item], and is here
for code uniformity and convenience to avoid type casting by user.

This function is not available in bindings as they already
inherit `get_item()` method from [iface@Gio.ListModel] interface.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="69"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="820">The #ClapperMediaItem at @index.</doc>
          <type name="MediaItem" c:type="ClapperMediaItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="809">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="810">an item index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_items"
              c:identifier="clapper_queue_get_n_items"
              glib:get-property="n-items"
              introspectable="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="930">Get the number of items in #ClapperQueue.

This behaves the same as [method@Gio.ListModel.get_n_items], and is here
for code uniformity and convenience to avoid type casting by user.

This function is not available in bindings as they already
inherit get_n_items() method from #GListModel interface.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="79"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="942">The number of items in #ClapperQueue.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="932">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_progression_mode"
              c:identifier="clapper_queue_get_progression_mode"
              glib:get-property="progression-mode">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="999">Get the #ClapperQueueProgressionMode of the #ClapperQueue.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="83"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="1005">a currently set #ClapperQueueProgressionMode.</doc>
          <type name="QueueProgressionMode"
                c:type="ClapperQueueProgressionMode"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1001">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_item" c:identifier="clapper_queue_insert_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="449">Insert another #ClapperMediaItem at @index position to the queue.

If item is already in queue, this function will do nothing,
so it is safe to call multiple times if unsure.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="49"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="451">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="452">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="453">the index to place @item in queue, -1 to append</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="item_is_current"
              c:identifier="clapper_queue_item_is_current">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="880">Checks if given #ClapperMediaItem is currently selected.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="75"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="887">%TRUE if @item is a current media item, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="882">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="883">a #ClapperMediaItem to check</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_index" c:identifier="clapper_queue_remove_index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="597">Removes #ClapperMediaItem at @index from the queue.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="599">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="600">an item index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_item" c:identifier="clapper_queue_remove_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="570">Removes #ClapperMediaItem from the queue.

If item either was never in the queue or was removed from
it earlier, this function will do nothing, so it is safe
to call multiple times if unsure.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="53"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="572">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="573">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="reposition_item"
              c:identifier="clapper_queue_reposition_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="506">Change position of one #ClapperMediaItem within the queue.

Note that the @index is the new position you expect item to be
after whole reposition operation is finished.

If item is not in the queue, this function will do nothing.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="508">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="509">a #ClapperMediaItem</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="510">the index to place @item in queue, -1 to place at the end</doc>
            <type name="gint" c:type="gint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_index" c:identifier="clapper_queue_select_index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="713">Selects #ClapperMediaItem at @index from @queue as current one or
unselects currently selected index when @index is [const@Clapper.QUEUE_INVALID_POSITION].</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="63"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="721">%TRUE if item at @index could be selected/unselected,
  %FALSE if index was out of queue range.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="715">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="716">an item index or [const@Clapper.QUEUE_INVALID_POSITION] to unselect</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_item" c:identifier="clapper_queue_select_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="683">Selects #ClapperMediaItem from @queue as current one or
unselects currently selected item when @item is %NULL.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="691">%TRUE if item could be selected/unselected,
  %FALSE if it was not in the queue.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="685">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="item"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="686">a #ClapperMediaItem or %NULL to unselect</doc>
            <type name="MediaItem" c:type="ClapperMediaItem*"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_next_item"
              c:identifier="clapper_queue_select_next_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="745">Selects next #ClapperMediaItem from @queue for playback.

Note that this will try to select next item in the order
of the queue, regardless of [enum@Clapper.QueueProgressionMode] set.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="65"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="754">%TRUE if there was another media item in queue, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="747">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="select_previous_item"
              c:identifier="clapper_queue_select_previous_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="776">Selects previous #ClapperMediaItem from @queue for playback.

Note that this will try to select previous item in the order
of the queue, regardless of [enum@Clapper.QueueProgressionMode] set.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="67"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="785">%TRUE if there was previous media item in queue, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="778">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_gapless"
              c:identifier="clapper_queue_set_gapless"
              glib:set-property="gapless">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1021">Set #ClapperQueue progression to be gapless.

Gapless playback will try to re-use as much as possible of underlying
GStreamer elements when #ClapperQueue progresses, removing any
potential gap in the data.

Enabling this option mostly makes sense when used together with
[property@Clapper.Queue:progression-mode] property set to
[enum@Clapper.QueueProgressionMode.CONSECUTIVE].

NOTE: This feature within GStreamer is rather new and
might still cause playback issues. Disabled by default.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="85"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1023">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="gapless" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1024">%TRUE to enable, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_instant"
              c:identifier="clapper_queue_set_instant"
              glib:set-property="instant">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1083">Set #ClapperQueue media item changes to be instant.

Instant will try to re-use as much as possible of underlying
GStreamer elements when #ClapperMediaItem is selected, allowing
media item change requests to be faster.

NOTE: This feature within GStreamer is rather new and
might still cause playback issues. Disabled by default.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="89"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1085">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="instant" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="1086">%TRUE to enable, %FALSE otherwise.</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_progression_mode"
              c:identifier="clapper_queue_set_progression_mode"
              glib:set-property="progression-mode">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="952">Set the #ClapperQueueProgressionMode of the #ClapperQueue.

Changing the mode set will alter next item selection at the
end of playback. For possible values and their descriptions,
see #ClapperQueueProgressionMode documentation.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="81"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="954">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="mode" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="955">a #ClapperQueueProgressionMode</doc>
            <type name="QueueProgressionMode"
                  c:type="ClapperQueueProgressionMode"/>
          </parameter>
        </parameters>
      </method>
      <method name="steal_index" c:identifier="clapper_queue_steal_index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="611">Removes #ClapperMediaItem at @index from the queue.</doc>
        <source-position filename="src/lib/clapper/clapper-queue.h" line="57"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-queue.c"
               line="618">The removed #ClapperMediaItem at @index.</doc>
          <type name="MediaItem" c:type="ClapperMediaItem*"/>
        </return-value>
        <parameters>
          <instance-parameter name="queue" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="613">a #ClapperQueue</doc>
            <type name="Queue" c:type="ClapperQueue*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-queue.c"
                 line="614">an item index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-index"
                writable="1"
                transfer-ownership="none"
                getter="get_current_index"
                default-value="4294967295">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1253">Index of currently selected media item for playback.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-item"
                transfer-ownership="none"
                getter="get_current_item">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1244">Currently selected media item for playback.</doc>
        <type name="MediaItem"/>
      </property>
      <property name="gapless"
                writable="1"
                transfer-ownership="none"
                setter="set_gapless"
                getter="get_gapless"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1280">Use gapless progression.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="instant"
                writable="1"
                transfer-ownership="none"
                setter="set_instant"
                getter="get_instant"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1289">Use instant media item changes.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="n-items"
                transfer-ownership="none"
                getter="get_n_items"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1262">Number of media items in the queue.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="progression-mode"
                writable="1"
                transfer-ownership="none"
                setter="set_progression_mode"
                getter="get_progression_mode"
                default-value="CLAPPER_QUEUE_PROGRESSION_NONE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-queue.c"
             line="1271">Queue progression mode.</doc>
        <type name="QueueProgressionMode"/>
      </property>
    </class>
    <record name="QueueClass"
            c:type="ClapperQueueClass"
            glib:is-gtype-struct-for="Queue">
      <source-position filename="src/lib/clapper/clapper-queue.h" line="38"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
    </record>
    <enumeration name="QueueProgressionMode"
                 glib:type-name="ClapperQueueProgressionMode"
                 glib:get-type="clapper_queue_progression_mode_get_type"
                 c:type="ClapperQueueProgressionMode">
      <member name="none"
              value="0"
              c:identifier="CLAPPER_QUEUE_PROGRESSION_NONE"
              glib:nick="none"
              glib:name="CLAPPER_QUEUE_PROGRESSION_NONE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="60">Queue will not change current item after playback finishes.</doc>
      </member>
      <member name="consecutive"
              value="1"
              c:identifier="CLAPPER_QUEUE_PROGRESSION_CONSECUTIVE"
              glib:nick="consecutive"
              glib:name="CLAPPER_QUEUE_PROGRESSION_CONSECUTIVE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="61">Queue selects items one after another until the end.
  When end of queue is reached, this mode will continue one another item is added to the queue,
  playing it if player autoplay property is set, otherwise current player state is kept.</doc>
      </member>
      <member name="repeat_item"
              value="2"
              c:identifier="CLAPPER_QUEUE_PROGRESSION_REPEAT_ITEM"
              glib:nick="repeat-item"
              glib:name="CLAPPER_QUEUE_PROGRESSION_REPEAT_ITEM">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="64">Queue keeps repeating current media item.</doc>
      </member>
      <member name="carousel"
              value="3"
              c:identifier="CLAPPER_QUEUE_PROGRESSION_CAROUSEL"
              glib:nick="carousel"
              glib:name="CLAPPER_QUEUE_PROGRESSION_CAROUSEL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="65">Queue starts from beginning after last media item.</doc>
      </member>
      <member name="shuffle"
              value="4"
              c:identifier="CLAPPER_QUEUE_PROGRESSION_SHUFFLE"
              glib:nick="shuffle"
              glib:name="CLAPPER_QUEUE_PROGRESSION_SHUFFLE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="66">Queue selects a random media item after current one.
  Shuffle mode will avoid reselecting previously shuffled items as long as possible.
  After it runs out of unused items, shuffling begins anew.</doc>
      </member>
    </enumeration>
    <function-macro name="SERVER_CAST"
                    c:identifier="CLAPPER_SERVER_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_CAST"
                    c:identifier="CLAPPER_STREAM_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-stream.h" line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="STREAM_LIST_CAST"
                    c:identifier="CLAPPER_STREAM_LIST_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-stream-list.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <constant name="STREAM_LIST_INVALID_POSITION"
              value="4294967295"
              c:type="CLAPPER_STREAM_LIST_INVALID_POSITION">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-stream-list.h"
           line="39">The value used to refer to an invalid position in a #ClapperStreamList</doc>
      <source-position filename="src/lib/clapper/clapper-stream-list.h"
                       line="44"/>
      <type name="guint" c:type="guint"/>
    </constant>
    <function-macro name="SUBTITLE_STREAM_CAST"
                    c:identifier="CLAPPER_SUBTITLE_STREAM_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-subtitle-stream.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="Server"
           c:symbol-prefix="server"
           c:type="ClapperServer"
           parent="Feature"
           glib:type-name="ClapperServer"
           glib:get-type="clapper_server_get_type"
           glib:type-struct="ServerClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/features/server/clapper-server.c"
           line="20">An optional Server feature to add to the player.

#ClapperServer is a feature that hosts a local server
providing an ability to both monitor and control playback
through WebSocket messages and HTTP requests.

Use [const@Clapper.HAVE_SERVER] macro to check if Clapper API
was compiled with this feature.</doc>
      <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                       line="35"/>
      <constructor name="new" c:identifier="clapper_server_new">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="812">Creates a new #ClapperServer instance.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="37"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="817">a new #ClapperServer instance.</doc>
          <type name="Server" c:type="ClapperServer*"/>
        </return-value>
      </constructor>
      <method name="get_current_port"
              c:identifier="clapper_server_get_current_port"
              glib:get-property="current-port">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="942">Get port on which server is currently listening on.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="49"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="948">Current listening port or 0 if server is not listening.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="944">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_enabled"
              c:identifier="clapper_server_get_enabled"
              glib:get-property="enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="855">Get whether #ClapperServer is set to be running.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="861">%TRUE if enabled, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="857">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_port"
              c:identifier="clapper_server_get_port"
              glib:get-property="port">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="917">Get requested server listening port.

If you want to know the port server is currently listening on,
use [method@Clapper.Server.get_current_port] instead.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="47"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="926">Requested listening port or 0 when using random port.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="919">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_queue_controllable"
              c:identifier="clapper_server_get_queue_controllable"
              glib:get-property="queue-controllable">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="990">Get whether remote @server clients can control [class@Clapper.Queue].</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="53"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="996">%TRUE if control over #ClapperQueue is allowed, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="992">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_running"
              c:identifier="clapper_server_get_running"
              glib:get-property="running">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="871">Get whether #ClapperServer is currently running.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/features/server/clapper-server.c"
               line="877">%TRUE if running, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="873">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="set_enabled"
              c:identifier="clapper_server_set_enabled"
              glib:set-property="enabled">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="828">Set whether #ClapperServer should be running.

Note that server feature will run only after being added to the player.
It can be however set to enabled earlier. If server was already added,
changing this property allows to start/stop server at any time.

To be notified when server is actually running/stopped after being enabled/disabled,
you can listen for changes to [property@Clapper.Server:running] property.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="830">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
          <parameter name="enabled" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="831">if #ClapperServer should run</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_port"
              c:identifier="clapper_server_set_port"
              glib:set-property="port">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="893">Set server listening port.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="895">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
          <parameter name="port" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="896">a port number or 0 for random free port</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="set_queue_controllable"
              c:identifier="clapper_server_set_queue_controllable"
              glib:set-property="queue-controllable">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="964">Set whether remote @server clients can control [class@Clapper.Queue].

This includes ability to add/remove items from the queue and selecting
current item for playback remotely using WebSocket messages.

You probably want to keep this disabled if your application
is supposed to manage what is played now and not WebSocket client.</doc>
        <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                         line="51"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="server" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="966">a #ClapperServer</doc>
            <type name="Server" c:type="ClapperServer*"/>
          </instance-parameter>
          <parameter name="controllable" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="967">if #ClapperQueue should be controllable</doc>
            <type name="gboolean" c:type="gboolean"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-port"
                transfer-ownership="none"
                getter="get_current_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1153">Port on which server is currently listening on or 0 if not listening.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="enabled"
                writable="1"
                transfer-ownership="none"
                setter="set_enabled"
                getter="get_enabled"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1126">Whether server is enabled.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="port"
                writable="1"
                transfer-ownership="none"
                setter="set_port"
                getter="get_port"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1144">Port to listen on or 0 for using random unused port.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="queue-controllable"
                writable="1"
                transfer-ownership="none"
                setter="set_queue_controllable"
                getter="get_queue_controllable"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1162">Whether remote server clients can control #ClapperQueue.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <property name="running"
                transfer-ownership="none"
                getter="get_running"
                default-value="FALSE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1135">Whether server is currently running.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </property>
      <glib:signal name="error" when="last" no-recurse="1" no-hooks="1">
        <doc xml:space="preserve"
             filename="src/lib/clapper/features/server/clapper-server.c"
             line="1171">Error signal when server could not start.
This will be emitted from application main thread.</doc>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <parameter name="error" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/features/server/clapper-server.c"
                 line="1174">a #GError</doc>
            <type name="GLib.Error"/>
          </parameter>
        </parameters>
      </glib:signal>
    </class>
    <record name="ServerClass"
            c:type="ClapperServerClass"
            glib:is-gtype-struct-for="Server">
      <source-position filename="src/lib/clapper/features/server/clapper-server.h"
                       line="35"/>
      <field name="parent_class">
        <type name="FeatureClass" c:type="ClapperFeatureClass"/>
      </field>
    </record>
    <class name="Stream"
           c:symbol-prefix="stream"
           c:type="ClapperStream"
           parent="Gst.Object"
           glib:type-name="ClapperStream"
           glib:get-type="clapper_stream_get_type"
           glib:type-struct="StreamClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-stream.c"
           line="20">Represents a stream within media.</doc>
      <source-position filename="src/lib/clapper/clapper-stream.h" line="59"/>
      <virtual-method name="internal_stream_updated">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream.h"
             line="43">This function is called when internal #GstStream gets updated.
Meant for internal usage only. Used for subclasses to update
their properties accordingly.

Note that this vfunc is called from different threads.</doc>
        <source-position filename="src/lib/clapper/clapper-stream.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream.h"
                 line="45">a #ClapperStream</doc>
            <type name="Stream" c:type="ClapperStream*"/>
          </instance-parameter>
          <parameter name="caps"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream.h"
                 line="46">an updated #GstCaps if changed</doc>
            <type name="Gst.Caps" c:type="GstCaps*"/>
          </parameter>
          <parameter name="tags"
                     transfer-ownership="none"
                     nullable="1"
                     allow-none="1">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream.h"
                 line="47">an updated #GstTagList if changed</doc>
            <type name="Gst.TagList" c:type="GstTagList*"/>
          </parameter>
        </parameters>
      </virtual-method>
      <method name="get_stream_type"
              c:identifier="clapper_stream_get_stream_type"
              glib:get-property="stream-type">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream.c"
             line="106">Get the #ClapperStreamType of @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-stream.h"
                         line="61"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream.c"
               line="112">type of stream.</doc>
          <type name="StreamType" c:type="ClapperStreamType"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream.c"
                 line="108">a #ClapperStream</doc>
            <type name="Stream" c:type="ClapperStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_title"
              c:identifier="clapper_stream_get_title"
              glib:get-property="title">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream.c"
             line="126">Get the title of @stream, if any.</doc>
        <source-position filename="src/lib/clapper/clapper-stream.h"
                         line="63"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream.c"
               line="132">title of stream.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream.c"
                 line="128">a #ClapperStream</doc>
            <type name="Stream" c:type="ClapperStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="stream-type"
                writable="1"
                construct-only="1"
                transfer-ownership="none"
                getter="get_stream_type"
                default-value="CLAPPER_STREAM_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream.c"
             line="358">Type of stream.</doc>
        <type name="StreamType"/>
      </property>
      <property name="title"
                transfer-ownership="none"
                getter="get_title"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream.c"
             line="367">Title of stream.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <field name="parent_instance">
        <type name="Gst.Object" c:type="GstObject"/>
      </field>
    </class>
    <record name="StreamClass"
            c:type="ClapperStreamClass"
            glib:is-gtype-struct-for="Stream">
      <source-position filename="src/lib/clapper/clapper-stream.h" line="59"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
      <field name="internal_stream_updated">
        <callback name="internal_stream_updated">
          <source-position filename="src/lib/clapper/clapper-stream.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="stream" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-stream.h"
                   line="45">a #ClapperStream</doc>
              <type name="Stream" c:type="ClapperStream*"/>
            </parameter>
            <parameter name="caps"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-stream.h"
                   line="46">an updated #GstCaps if changed</doc>
              <type name="Gst.Caps" c:type="GstCaps*"/>
            </parameter>
            <parameter name="tags"
                       transfer-ownership="none"
                       nullable="1"
                       allow-none="1">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-stream.h"
                   line="47">an updated #GstTagList if changed</doc>
              <type name="Gst.TagList" c:type="GstTagList*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="StreamList"
           c:symbol-prefix="stream_list"
           c:type="ClapperStreamList"
           parent="Gst.Object"
           glib:type-name="ClapperStreamList"
           glib:get-type="clapper_stream_list_get_type"
           glib:type-struct="StreamListClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-stream-list.c"
           line="20">A list of media streams.</doc>
      <source-position filename="src/lib/clapper/clapper-stream-list.h"
                       line="37"/>
      <implements name="Gio.ListModel"/>
      <method name="get_current_index"
              c:identifier="clapper_stream_list_get_current_index"
              glib:get-property="current-index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="294">Get index of the currently selected #ClapperStream.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="54"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="300">Current stream index or [const@Clapper.STREAM_LIST_INVALID_POSITION]
  when nothing is selected.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="296">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_current_stream"
              c:identifier="clapper_stream_list_get_current_stream"
              glib:get-property="current-stream">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="271">Get the currently selected #ClapperStream.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="52"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="277">The current #ClapperStream.</doc>
          <type name="Stream" c:type="ClapperStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="273">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_n_streams"
              c:identifier="clapper_stream_list_get_n_streams"
              glib:get-property="n-streams">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="317">Get the number of streams in #ClapperStreamList.

This behaves the same as [method@Gio.ListModel.get_n_items], and is here
for code uniformity and convenience to avoid type casting by user.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="56"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="326">The number of streams in #ClapperStreamList.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="319">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_stream" c:identifier="clapper_stream_list_get_stream">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="251">Get the #ClapperStream at index.

This behaves the same as [method@Gio.ListModel.get_item], and is here
for code uniformity and convenience to avoid type casting by user.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="50"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="261">The #ClapperStream at @index.</doc>
          <type name="Stream" c:type="ClapperStream*"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="253">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="254">a stream index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_index"
              c:identifier="clapper_stream_list_select_index">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="221">Selects #ClapperStream at @index from @list as current one.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="48"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="228">%TRUE if stream could be selected, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="223">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="224">a stream index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="select_stream"
              c:identifier="clapper_stream_list_select_stream">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="190">Selects #ClapperStream from @list to be activated.</doc>
        <source-position filename="src/lib/clapper/clapper-stream-list.h"
                         line="46"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-stream-list.c"
               line="197">%TRUE if stream was in the @list, %FALSE otherwise.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="list" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="192">a #ClapperStreamList</doc>
            <type name="StreamList" c:type="ClapperStreamList*"/>
          </instance-parameter>
          <parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-stream-list.c"
                 line="193">a #ClapperStream</doc>
            <type name="Stream" c:type="ClapperStream*"/>
          </parameter>
        </parameters>
      </method>
      <property name="current-index"
                writable="1"
                transfer-ownership="none"
                getter="get_current_index"
                default-value="4294967295">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="527">Index of currently selected stream.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="current-stream"
                transfer-ownership="none"
                getter="get_current_stream">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="518">Currently selected stream.</doc>
        <type name="Stream"/>
      </property>
      <property name="n-streams"
                transfer-ownership="none"
                getter="get_n_streams"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-stream-list.c"
             line="536">Number of streams in the list.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="StreamListClass"
            c:type="ClapperStreamListClass"
            glib:is-gtype-struct-for="StreamList">
      <source-position filename="src/lib/clapper/clapper-stream-list.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
    </record>
    <enumeration name="StreamType"
                 glib:type-name="ClapperStreamType"
                 glib:get-type="clapper_stream_type_get_type"
                 c:type="ClapperStreamType">
      <member name="unknown"
              value="0"
              c:identifier="CLAPPER_STREAM_TYPE_UNKNOWN"
              glib:nick="unknown"
              glib:name="CLAPPER_STREAM_TYPE_UNKNOWN">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="102">Unknown stream type.</doc>
      </member>
      <member name="video"
              value="1"
              c:identifier="CLAPPER_STREAM_TYPE_VIDEO"
              glib:nick="video"
              glib:name="CLAPPER_STREAM_TYPE_VIDEO">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="103">Stream is a #ClapperVideoStream.</doc>
      </member>
      <member name="audio"
              value="2"
              c:identifier="CLAPPER_STREAM_TYPE_AUDIO"
              glib:nick="audio"
              glib:name="CLAPPER_STREAM_TYPE_AUDIO">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="104">Stream is a #ClapperAudioStream.</doc>
      </member>
      <member name="subtitle"
              value="3"
              c:identifier="CLAPPER_STREAM_TYPE_SUBTITLE"
              glib:nick="subtitle"
              glib:name="CLAPPER_STREAM_TYPE_SUBTITLE">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-enums.h"
             line="105">Stream is a #ClapperSubtitleStream.</doc>
      </member>
    </enumeration>
    <class name="SubtitleStream"
           c:symbol-prefix="subtitle_stream"
           c:type="ClapperSubtitleStream"
           parent="Stream"
           glib:type-name="ClapperSubtitleStream"
           glib:get-type="clapper_subtitle_stream_get_type"
           glib:type-struct="SubtitleStreamClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-subtitle-stream.c"
           line="20">Represents a subtitle stream within media.</doc>
      <source-position filename="src/lib/clapper/clapper-subtitle-stream.h"
                       line="35"/>
      <method name="get_lang_code"
              c:identifier="clapper_subtitle_stream_get_lang_code"
              glib:get-property="lang-code">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-subtitle-stream.c"
             line="83">Get an ISO-639 language code of the @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-subtitle-stream.h"
                         line="37"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-subtitle-stream.c"
               line="89">the language code of subtitle stream.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-subtitle-stream.c"
                 line="85">a #ClapperSubtitleStream</doc>
            <type name="SubtitleStream" c:type="ClapperSubtitleStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_lang_name"
              c:identifier="clapper_subtitle_stream_get_lang_name"
              glib:get-property="lang-name">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-subtitle-stream.c"
             line="105">Get language name of the @stream.

This function will try to return a translated string into current
locale if possible, with a fallback to a name extracted from tags.</doc>
        <source-position filename="src/lib/clapper/clapper-subtitle-stream.h"
                         line="39"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-subtitle-stream.c"
               line="114">the language name of subtitle stream.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-subtitle-stream.c"
                 line="107">a #ClapperSubtitleStream</doc>
            <type name="SubtitleStream" c:type="ClapperSubtitleStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="lang-code"
                transfer-ownership="none"
                getter="get_lang_code"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-subtitle-stream.c"
             line="198">Stream language code in ISO-639 format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="lang-name"
                transfer-ownership="none"
                getter="get_lang_name"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-subtitle-stream.c"
             line="207">Stream language name.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
    </class>
    <record name="SubtitleStreamClass"
            c:type="ClapperSubtitleStreamClass"
            glib:is-gtype-struct-for="SubtitleStream">
      <source-position filename="src/lib/clapper/clapper-subtitle-stream.h"
                       line="35"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="ClapperStreamClass"/>
      </field>
    </record>
    <function-macro name="THREADED_OBJECT_CAST"
                    c:identifier="CLAPPER_THREADED_OBJECT_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TIMELINE_CAST"
                    c:identifier="CLAPPER_TIMELINE_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-timeline.h"
                       line="35"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <function-macro name="TIME_ARGS"
                    c:identifier="CLAPPER_TIME_ARGS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-utils.h"
           line="46">Formats @t for the [const@Clapper.TIME_FORMAT] format string.</doc>
      <source-position filename="src/lib/clapper/clapper-utils.h" line="52"/>
      <parameters>
        <parameter name="t">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-utils.h"
               line="48">time value in seconds</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TIME_FORMAT"
              value="02u:%02u:%02u"
              c:type="CLAPPER_TIME_FORMAT"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-utils.h"
           line="31">A string that can be used in printf-like format to display
e.g. position or duration in `hh:mm:ss` format. Meant to be
used together with [func@Clapper.TIME_ARGS].

Example:

```c
gchar *str = g_strdup_printf ("%" CLAPPER_TIME_FORMAT, CLAPPER_TIME_ARGS (time));
```</doc>
      <source-position filename="src/lib/clapper/clapper-utils.h" line="44"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="TIME_MS_ARGS"
                    c:identifier="CLAPPER_TIME_MS_ARGS"
                    introspectable="0">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-utils.h"
           line="71">Formats @t for the [const@Clapper.TIME_MS_FORMAT] format string.</doc>
      <source-position filename="src/lib/clapper/clapper-utils.h" line="77"/>
      <parameters>
        <parameter name="t">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-utils.h"
               line="73">time value in seconds</doc>
        </parameter>
      </parameters>
    </function-macro>
    <constant name="TIME_MS_FORMAT"
              value="02u:%02u:%02u.%03u"
              c:type="CLAPPER_TIME_MS_FORMAT"
              introspectable="0">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-utils.h"
           line="57">Same as [const@Clapper.TIME_FORMAT], but also displays milliseconds.
Meant to be used together with [func@Clapper.TIME_MS_ARGS].

Example:

```c
gchar *str = g_strdup_printf ("%" CLAPPER_TIME_MS_FORMAT, CLAPPER_TIME_MS_ARGS (time));
```</doc>
      <source-position filename="src/lib/clapper/clapper-utils.h" line="69"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <class name="ThreadedObject"
           c:symbol-prefix="threaded_object"
           c:type="ClapperThreadedObject"
           parent="Gst.Object"
           glib:type-name="ClapperThreadedObject"
           glib:get-type="clapper_threaded_object_get_type"
           glib:type-struct="ThreadedObjectClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-threaded-object.c"
           line="20">A base class for creating objects that work within a separate thread.</doc>
      <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                       line="69"/>
      <virtual-method name="thread_start">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.h"
             line="47">Called right after thread started.

Useful for initializing objects that work within this new thread.</doc>
        <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                         line="55"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="threaded_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-threaded-object.h"
                 line="49">a #ClapperThreadedObject</doc>
            <type name="ThreadedObject" c:type="ClapperThreadedObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <virtual-method name="thread_stop">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.h"
             line="57">Called when thread is going to stop.

Useful for cleanup of things created on thread start.</doc>
        <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                         line="65"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="threaded_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-threaded-object.h"
                 line="59">a #ClapperThreadedObject</doc>
            <type name="ThreadedObject" c:type="ClapperThreadedObject*"/>
          </instance-parameter>
        </parameters>
      </virtual-method>
      <method name="get_context"
              c:identifier="clapper_threaded_object_get_context">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.c"
             line="46">Get the #GMainContext of the thread used by this object.

Useful when you want to invoke object thread to do some
action in it from a different thread.</doc>
        <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                         line="71"/>
        <return-value transfer-ownership="full">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-threaded-object.c"
               line="55">a #GMainContext of the object used thread.</doc>
          <type name="GLib.MainContext" c:type="GMainContext*"/>
        </return-value>
        <parameters>
          <instance-parameter name="threaded_object" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-threaded-object.c"
                 line="48">a #ClapperThreadedObject</doc>
            <type name="ThreadedObject" c:type="ClapperThreadedObject*"/>
          </instance-parameter>
        </parameters>
      </method>
      <field name="parent_instance">
        <type name="Gst.Object" c:type="GstObject"/>
      </field>
    </class>
    <record name="ThreadedObjectClass"
            c:type="ClapperThreadedObjectClass"
            glib:is-gtype-struct-for="ThreadedObject">
      <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                       line="69"/>
      <field name="parent_class">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.h"
             line="39">The object class structure.</doc>
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
      <field name="thread_start">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.h"
             line="40">Called right after thread started.</doc>
        <callback name="thread_start">
          <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                           line="55"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="threaded_object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-threaded-object.h"
                   line="49">a #ClapperThreadedObject</doc>
              <type name="ThreadedObject" c:type="ClapperThreadedObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="thread_stop">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-threaded-object.h"
             line="41">Called when thread is going to stop.</doc>
        <callback name="thread_stop">
          <source-position filename="src/lib/clapper/clapper-threaded-object.h"
                           line="65"/>
          <return-value transfer-ownership="none">
            <type name="none" c:type="void"/>
          </return-value>
          <parameters>
            <parameter name="threaded_object" transfer-ownership="none">
              <doc xml:space="preserve"
                   filename="src/lib/clapper/clapper-threaded-object.h"
                   line="59">a #ClapperThreadedObject</doc>
              <type name="ThreadedObject" c:type="ClapperThreadedObject*"/>
            </parameter>
          </parameters>
        </callback>
      </field>
      <field name="padding" readable="0" private="1">
        <array zero-terminated="0" fixed-size="4">
          <type name="gpointer" c:type="gpointer"/>
        </array>
      </field>
    </record>
    <class name="Timeline"
           c:symbol-prefix="timeline"
           c:type="ClapperTimeline"
           parent="Gst.Object"
           glib:type-name="ClapperTimeline"
           glib:get-type="clapper_timeline_get_type"
           glib:type-struct="TimelineClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-timeline.c"
           line="20">A media timeline filled with point markers.</doc>
      <source-position filename="src/lib/clapper/clapper-timeline.h"
                       line="37"/>
      <implements name="Gio.ListModel"/>
      <method name="get_marker" c:identifier="clapper_timeline_get_marker">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-timeline.c"
             line="262">Get the #ClapperMarker at index.

This behaves the same as [method@Gio.ListModel.get_item], and is here
for code uniformity and convenience to avoid type casting by user.</doc>
        <source-position filename="src/lib/clapper/clapper-timeline.h"
                         line="43"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-timeline.c"
               line="272">The #ClapperMarker at @index.</doc>
          <type name="Marker" c:type="ClapperMarker*"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="264">a #ClapperTimeline</doc>
            <type name="Timeline" c:type="ClapperTimeline*"/>
          </instance-parameter>
          <parameter name="index" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="265">a marker index</doc>
            <type name="guint" c:type="guint"/>
          </parameter>
        </parameters>
      </method>
      <method name="get_n_markers"
              c:identifier="clapper_timeline_get_n_markers"
              glib:get-property="n-markers">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-timeline.c"
             line="282">Get the number of markers in #ClapperTimeline.

This behaves the same as [method@Gio.ListModel.get_n_items], and is here
for code uniformity and convenience to avoid type casting by user.</doc>
        <source-position filename="src/lib/clapper/clapper-timeline.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-timeline.c"
               line="291">The number of markers in #ClapperTimeline.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="284">a #ClapperTimeline</doc>
            <type name="Timeline" c:type="ClapperTimeline*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="insert_marker"
              c:identifier="clapper_timeline_insert_marker">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-timeline.c"
             line="185">Insert the #ClapperMarker into @timeline.</doc>
        <source-position filename="src/lib/clapper/clapper-timeline.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-timeline.c"
               line="192">%TRUE if inserted, %FALSE if marker was
already inserted into timeline.</doc>
          <type name="gboolean" c:type="gboolean"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="187">a #ClapperTimeline</doc>
            <type name="Timeline" c:type="ClapperTimeline*"/>
          </instance-parameter>
          <parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="188">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </parameter>
        </parameters>
      </method>
      <method name="remove_marker"
              c:identifier="clapper_timeline_remove_marker">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-timeline.c"
             line="222">Removes #ClapperMarker from the timeline.

If marker was not in the @timeline, this function will do nothing,
so it is safe to call if unsure.</doc>
        <source-position filename="src/lib/clapper/clapper-timeline.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <type name="none" c:type="void"/>
        </return-value>
        <parameters>
          <instance-parameter name="timeline" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="224">a #ClapperTimeline</doc>
            <type name="Timeline" c:type="ClapperTimeline*"/>
          </instance-parameter>
          <parameter name="marker" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-timeline.c"
                 line="225">a #ClapperMarker</doc>
            <type name="Marker" c:type="ClapperMarker*"/>
          </parameter>
        </parameters>
      </method>
      <property name="n-markers"
                transfer-ownership="none"
                getter="get_n_markers"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-timeline.c"
             line="549">Number of markers in the timeline.</doc>
        <type name="guint" c:type="guint"/>
      </property>
    </class>
    <record name="TimelineClass"
            c:type="ClapperTimelineClass"
            glib:is-gtype-struct-for="Timeline">
      <source-position filename="src/lib/clapper/clapper-timeline.h"
                       line="37"/>
      <field name="parent_class">
        <type name="Gst.ObjectClass" c:type="GstObjectClass"/>
      </field>
    </record>
    <constant name="VERSION_S" value="0.7.0" c:type="CLAPPER_VERSION_S">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-version.h"
           line="54">Clapper version, encoded as a string</doc>
      <source-position filename="src/lib/clapper/clapper-version.h" line="59"/>
      <type name="utf8" c:type="gchar*"/>
    </constant>
    <function-macro name="VIDEO_STREAM_CAST"
                    c:identifier="CLAPPER_VIDEO_STREAM_CAST"
                    introspectable="0">
      <source-position filename="src/lib/clapper/clapper-video-stream.h"
                       line="33"/>
      <parameters>
        <parameter name="obj">
        </parameter>
      </parameters>
    </function-macro>
    <class name="VideoStream"
           c:symbol-prefix="video_stream"
           c:type="ClapperVideoStream"
           parent="Stream"
           glib:type-name="ClapperVideoStream"
           glib:get-type="clapper_video_stream_get_type"
           glib:type-struct="VideoStreamClass">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper-video-stream.c"
           line="20">Represents a video stream within media.</doc>
      <source-position filename="src/lib/clapper/clapper-video-stream.h"
                       line="35"/>
      <method name="get_bitrate"
              c:identifier="clapper_video_stream_get_bitrate"
              glib:get-property="bitrate">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="210">Get bitrate of video @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="45"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="216">the bitrate of video stream.</doc>
          <type name="guint" c:type="guint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="212">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_codec"
              c:identifier="clapper_video_stream_get_codec"
              glib:get-property="codec">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="121">Get codec used to encode @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="37"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="127">the video codec of stream
  or %NULL if undetermined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="123">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_fps"
              c:identifier="clapper_video_stream_get_fps"
              glib:get-property="fps">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="188">Get number of frames per second in video @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="43"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="194">the FPS of video stream.</doc>
          <type name="gdouble" c:type="gdouble"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="190">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_height"
              c:identifier="clapper_video_stream_get_height"
              glib:get-property="height">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="166">Get height of video @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="41"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="172">the height of video stream.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="168">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_pixel_format"
              c:identifier="clapper_video_stream_get_pixel_format"
              glib:get-property="pixel-format">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="232">Get pixel format of video @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="47"/>
        <return-value transfer-ownership="full" nullable="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="238">the pixel format of stream
  or %NULL if undetermined.</doc>
          <type name="utf8" c:type="gchar*"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="234">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <method name="get_width"
              c:identifier="clapper_video_stream_get_width"
              glib:get-property="width">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="144">Get width of video @stream.</doc>
        <source-position filename="src/lib/clapper/clapper-video-stream.h"
                         line="39"/>
        <return-value transfer-ownership="none">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper-video-stream.c"
               line="150">the width of video stream.</doc>
          <type name="gint" c:type="gint"/>
        </return-value>
        <parameters>
          <instance-parameter name="stream" transfer-ownership="none">
            <doc xml:space="preserve"
                 filename="src/lib/clapper/clapper-video-stream.c"
                 line="146">a #ClapperVideoStream</doc>
            <type name="VideoStream" c:type="ClapperVideoStream*"/>
          </instance-parameter>
        </parameters>
      </method>
      <property name="bitrate"
                transfer-ownership="none"
                getter="get_bitrate"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="366">Stream bitrate.</doc>
        <type name="guint" c:type="guint"/>
      </property>
      <property name="codec"
                transfer-ownership="none"
                getter="get_codec"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="330">Stream codec.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="fps"
                transfer-ownership="none"
                getter="get_fps"
                default-value="0.000000">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="357">Stream FPS.</doc>
        <type name="gdouble" c:type="gdouble"/>
      </property>
      <property name="height"
                transfer-ownership="none"
                getter="get_height"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="348">Stream height.</doc>
        <type name="gint" c:type="gint"/>
      </property>
      <property name="pixel-format"
                transfer-ownership="none"
                getter="get_pixel_format"
                default-value="NULL">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="375">Stream pixel format.</doc>
        <type name="utf8" c:type="gchar*"/>
      </property>
      <property name="width"
                transfer-ownership="none"
                getter="get_width"
                default-value="0">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper-video-stream.c"
             line="339">Stream width.</doc>
        <type name="gint" c:type="gint"/>
      </property>
    </class>
    <record name="VideoStreamClass"
            c:type="ClapperVideoStreamClass"
            glib:is-gtype-struct-for="VideoStream">
      <source-position filename="src/lib/clapper/clapper-video-stream.h"
                       line="35"/>
      <field name="parent_class">
        <type name="StreamClass" c:type="ClapperStreamClass"/>
      </field>
    </record>
    <function name="init" c:identifier="clapper_init">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper.c"
           line="55">Initializes the Clapper library. Implementations must always call this
before using Clapper API.

Because Clapper uses GStreamer internally, this function will also initialize
GStreamer before initializing Clapper itself for user convienience, so
application does not have to do so anymore.

WARNING: This function will terminate your program if it was unable to
initialize for some reason. If you want to do some fallback logic,
use [func@Clapper.init_check] instead.</doc>
      <source-position filename="src/lib/clapper/clapper.h" line="55"/>
      <return-value transfer-ownership="none">
        <type name="none" c:type="void"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper.c"
               line="57">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper.c"
               line="58">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
    <function name="init_check" c:identifier="clapper_init_check">
      <doc xml:space="preserve"
           filename="src/lib/clapper/clapper.c"
           line="80">This function does the same thing as [func@Clapper.init], but instead of
terminating on failure it returns %FALSE with @error set.</doc>
      <source-position filename="src/lib/clapper/clapper.h" line="57"/>
      <return-value transfer-ownership="none">
        <doc xml:space="preserve"
             filename="src/lib/clapper/clapper.c"
             line="88">%TRUE if Clapper could be initialized, %FALSE otherwise.</doc>
        <type name="gboolean" c:type="gboolean"/>
      </return-value>
      <parameters>
        <parameter name="argc"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper.c"
               line="82">pointer to application's argc</doc>
          <type name="gint" c:type="int*"/>
        </parameter>
        <parameter name="argv"
                   direction="inout"
                   caller-allocates="0"
                   transfer-ownership="full"
                   nullable="1"
                   allow-none="1"
                   optional="1">
          <doc xml:space="preserve"
               filename="src/lib/clapper/clapper.c"
               line="83">pointer to application's argv</doc>
          <array length="0" zero-terminated="0" c:type="char***">
            <type name="utf8" c:type="char**"/>
          </array>
        </parameter>
      </parameters>
    </function>
  </namespace>
</repository>
