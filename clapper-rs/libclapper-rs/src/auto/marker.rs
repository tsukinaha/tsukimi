// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{MarkerType};
use glib::{prelude::*,translate::*};

glib::wrapper! {
    #[doc(alias = "ClapperMarker")]
    pub struct Marker(Object<ffi::ClapperMarker, ffi::ClapperMarkerClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::clapper_marker_get_type(),
    }
}

impl Marker {
    #[doc(alias = "clapper_marker_new")]
    pub fn new(marker_type: MarkerType, title: Option<&str>, start: f64, end: f64) -> Marker {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::clapper_marker_new(marker_type.into_glib(), title.to_glib_none().0, start, end))
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Marker`] objects.
            ///
            /// This method returns an instance of [`MarkerBuilder`](crate::builders::MarkerBuilder) which can be used to create [`Marker`] objects.
            pub fn builder() -> MarkerBuilder {
                MarkerBuilder::new()
            }
        

    #[doc(alias = "clapper_marker_get_end")]
    #[doc(alias = "get_end")]
    pub fn end(&self) -> f64 {
        unsafe {
            ffi::clapper_marker_get_end(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_marker_get_marker_type")]
    #[doc(alias = "get_marker_type")]
    pub fn marker_type(&self) -> MarkerType {
        unsafe {
            from_glib(ffi::clapper_marker_get_marker_type(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_marker_get_start")]
    #[doc(alias = "get_start")]
    pub fn start(&self) -> f64 {
        unsafe {
            ffi::clapper_marker_get_start(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_marker_get_title")]
    #[doc(alias = "get_title")]
    pub fn title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_none(ffi::clapper_marker_get_title(self.to_glib_none().0))
        }
    }
}

impl Default for Marker {
                     fn default() -> Self {
                         glib::object::Object::new::<Self>()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Marker`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct MarkerBuilder {
            builder: glib::object::ObjectBuilder<'static, Marker>,
        }

        impl MarkerBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn end(self, end: f64) -> Self {
                            Self { builder: self.builder.property("end", end), }
                        }

                            pub fn marker_type(self, marker_type: MarkerType) -> Self {
                            Self { builder: self.builder.property("marker-type", marker_type), }
                        }

                            pub fn start(self, start: f64) -> Self {
                            Self { builder: self.builder.property("start", start), }
                        }

                            pub fn title(self, title: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("title", title.into()), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn parent(self, parent: &impl IsA<gst::Object>) -> Self {
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Marker`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Marker {
    self.builder.build() }
}
