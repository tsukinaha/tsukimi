// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{StreamType};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperStream")]
    pub struct Stream(Object<ffi::ClapperStream, ffi::ClapperStreamClass>) @extends gst::Object;

    match fn {
        type_ => || ffi::clapper_stream_get_type(),
    }
}

impl Stream {
        pub const NONE: Option<&'static Stream> = None;
    

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Stream`] objects.
            ///
            /// This method returns an instance of [`StreamBuilder`](crate::builders::StreamBuilder) which can be used to create [`Stream`] objects.
            pub fn builder() -> StreamBuilder {
                StreamBuilder::new()
            }
        
}

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Stream`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct StreamBuilder {
            builder: glib::object::ObjectBuilder<'static, Stream>,
        }

        impl StreamBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn stream_type(self, stream_type: StreamType) -> Self {
                            Self { builder: self.builder.property("stream-type", stream_type), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn parent(self, parent: &impl IsA<gst::Object>) -> Self {
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Stream`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Stream {
    self.builder.build() }
}

mod sealed {
    pub trait Sealed {}
    impl<T: super::IsA<super::Stream>> Sealed for T {}
}

pub trait StreamExt: IsA<Stream> + sealed::Sealed + 'static {
    #[doc(alias = "clapper_stream_get_stream_type")]
    #[doc(alias = "get_stream_type")]
    fn stream_type(&self) -> StreamType {
        unsafe {
            from_glib(ffi::clapper_stream_get_stream_type(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_stream_get_title")]
    #[doc(alias = "get_title")]
    fn title(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_stream_get_title(self.as_ref().to_glib_none().0))
        }
    }

    #[doc(alias = "title")]
    fn connect_title_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_title_trampoline<P: IsA<Stream>, F: Fn(&P) + 'static>(this: *mut ffi::ClapperStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(Stream::from_glib_borrow(this).unsafe_cast_ref())
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::title\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_title_trampoline::<Self, F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl<O: IsA<Stream>> StreamExt for O {}
