// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{Feature};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperServer")]
    pub struct Server(Object<ffi::ClapperServer, ffi::ClapperServerClass>) @extends Feature, gst::Object;

    match fn {
        type_ => || ffi::clapper_server_get_type(),
    }
}

impl Server {
    #[doc(alias = "clapper_server_new")]
    pub fn new() -> Server {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::clapper_server_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Server`] objects.
            ///
            /// This method returns an instance of [`ServerBuilder`](crate::builders::ServerBuilder) which can be used to create [`Server`] objects.
            pub fn builder() -> ServerBuilder {
                ServerBuilder::new()
            }
        

    #[doc(alias = "clapper_server_get_current_port")]
    #[doc(alias = "get_current_port")]
    pub fn current_port(&self) -> u32 {
        unsafe {
            ffi::clapper_server_get_current_port(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_server_get_enabled")]
    #[doc(alias = "get_enabled")]
    pub fn is_enabled(&self) -> bool {
        unsafe {
            from_glib(ffi::clapper_server_get_enabled(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_server_get_port")]
    #[doc(alias = "get_port")]
    pub fn port(&self) -> u32 {
        unsafe {
            ffi::clapper_server_get_port(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_server_get_queue_controllable")]
    #[doc(alias = "get_queue_controllable")]
    pub fn is_queue_controllable(&self) -> bool {
        unsafe {
            from_glib(ffi::clapper_server_get_queue_controllable(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_server_get_running")]
    #[doc(alias = "get_running")]
    pub fn is_running(&self) -> bool {
        unsafe {
            from_glib(ffi::clapper_server_get_running(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_server_set_enabled")]
    pub fn set_enabled(&self, enabled: bool) {
        unsafe {
            ffi::clapper_server_set_enabled(self.to_glib_none().0, enabled.into_glib());
        }
    }

    #[doc(alias = "clapper_server_set_port")]
    pub fn set_port(&self, port: u32) {
        unsafe {
            ffi::clapper_server_set_port(self.to_glib_none().0, port);
        }
    }

    #[doc(alias = "clapper_server_set_queue_controllable")]
    pub fn set_queue_controllable(&self, controllable: bool) {
        unsafe {
            ffi::clapper_server_set_queue_controllable(self.to_glib_none().0, controllable.into_glib());
        }
    }

    //#[doc(alias = "error")]
    //pub fn connect_error<Unsupported or ignored types>(&self, f: F) -> SignalHandlerId {
    //    Ignored error: GLib.Error
    //}

    #[doc(alias = "current-port")]
    pub fn connect_current_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_current_port_trampoline<F: Fn(&Server) + 'static>(this: *mut ffi::ClapperServer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::current-port\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_current_port_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "enabled")]
    pub fn connect_enabled_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_enabled_trampoline<F: Fn(&Server) + 'static>(this: *mut ffi::ClapperServer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::enabled\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_enabled_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "port")]
    pub fn connect_port_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_port_trampoline<F: Fn(&Server) + 'static>(this: *mut ffi::ClapperServer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::port\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_port_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "queue-controllable")]
    pub fn connect_queue_controllable_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_queue_controllable_trampoline<F: Fn(&Server) + 'static>(this: *mut ffi::ClapperServer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::queue-controllable\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_queue_controllable_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "running")]
    pub fn connect_running_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_running_trampoline<F: Fn(&Server) + 'static>(this: *mut ffi::ClapperServer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::running\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_running_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for Server {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Server`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct ServerBuilder {
            builder: glib::object::ObjectBuilder<'static, Server>,
        }

        impl ServerBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn enabled(self, enabled: bool) -> Self {
                            Self { builder: self.builder.property("enabled", enabled), }
                        }

                            pub fn port(self, port: u32) -> Self {
                            Self { builder: self.builder.property("port", port), }
                        }

                            pub fn queue_controllable(self, queue_controllable: bool) -> Self {
                            Self { builder: self.builder.property("queue-controllable", queue_controllable), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn parent(self, parent: &impl IsA<gst::Object>) -> Self {
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Server`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Server {
    self.builder.build() }
}
