// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{DiscovererDiscoveryMode,Feature};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperDiscoverer")]
    pub struct Discoverer(Object<ffi::ClapperDiscoverer, ffi::ClapperDiscovererClass>) @extends Feature, gst::Object;

    match fn {
        type_ => || ffi::clapper_discoverer_get_type(),
    }
}

impl Discoverer {
    #[doc(alias = "clapper_discoverer_new")]
    pub fn new() -> Discoverer {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::clapper_discoverer_new())
        }
    }

            // rustdoc-stripper-ignore-next
            /// Creates a new builder-pattern struct instance to construct [`Discoverer`] objects.
            ///
            /// This method returns an instance of [`DiscovererBuilder`](crate::builders::DiscovererBuilder) which can be used to create [`Discoverer`] objects.
            pub fn builder() -> DiscovererBuilder {
                DiscovererBuilder::new()
            }
        

    #[doc(alias = "clapper_discoverer_get_discovery_mode")]
    #[doc(alias = "get_discovery_mode")]
    pub fn discovery_mode(&self) -> DiscovererDiscoveryMode {
        unsafe {
            from_glib(ffi::clapper_discoverer_get_discovery_mode(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_discoverer_set_discovery_mode")]
    pub fn set_discovery_mode(&self, mode: DiscovererDiscoveryMode) {
        unsafe {
            ffi::clapper_discoverer_set_discovery_mode(self.to_glib_none().0, mode.into_glib());
        }
    }

    #[doc(alias = "discovery-mode")]
    pub fn connect_discovery_mode_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_discovery_mode_trampoline<F: Fn(&Discoverer) + 'static>(this: *mut ffi::ClapperDiscoverer, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::discovery-mode\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_discovery_mode_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}

impl Default for Discoverer {
                     fn default() -> Self {
                         Self::new()
                     }
                 }

// rustdoc-stripper-ignore-next
        /// A [builder-pattern] type to construct [`Discoverer`] objects.
        ///
        /// [builder-pattern]: https://doc.rust-lang.org/1.0.0/style/ownership/builders.html
#[must_use = "The builder must be built to be used"]
pub struct DiscovererBuilder {
            builder: glib::object::ObjectBuilder<'static, Discoverer>,
        }

        impl DiscovererBuilder {
        fn new() -> Self {
            Self { builder: glib::object::Object::builder() }
        }

                            pub fn discovery_mode(self, discovery_mode: DiscovererDiscoveryMode) -> Self {
                            Self { builder: self.builder.property("discovery-mode", discovery_mode), }
                        }

                            pub fn name(self, name: impl Into<glib::GString>) -> Self {
                            Self { builder: self.builder.property("name", name.into()), }
                        }

                            pub fn parent(self, parent: &impl IsA<gst::Object>) -> Self {
                            Self { builder: self.builder.property("parent", parent.clone().upcast()), }
                        }

    // rustdoc-stripper-ignore-next
    /// Build the [`Discoverer`].
    #[must_use = "Building the object from the builder is usually expensive and is not expected to have side effects"]
    pub fn build(self) -> Discoverer {
    self.builder.build() }
}
