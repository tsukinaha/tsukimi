// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{Stream};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperVideoStream")]
    pub struct VideoStream(Object<ffi::ClapperVideoStream, ffi::ClapperVideoStreamClass>) @extends Stream, gst::Object;

    match fn {
        type_ => || ffi::clapper_video_stream_get_type(),
    }
}

impl VideoStream {
    #[doc(alias = "clapper_video_stream_get_bitrate")]
    #[doc(alias = "get_bitrate")]
    pub fn bitrate(&self) -> u32 {
        unsafe {
            ffi::clapper_video_stream_get_bitrate(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_video_stream_get_codec")]
    #[doc(alias = "get_codec")]
    pub fn codec(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_video_stream_get_codec(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_video_stream_get_fps")]
    #[doc(alias = "get_fps")]
    pub fn fps(&self) -> f64 {
        unsafe {
            ffi::clapper_video_stream_get_fps(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_video_stream_get_height")]
    #[doc(alias = "get_height")]
    pub fn height(&self) -> i32 {
        unsafe {
            ffi::clapper_video_stream_get_height(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_video_stream_get_pixel_format")]
    #[doc(alias = "get_pixel_format")]
    pub fn pixel_format(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_video_stream_get_pixel_format(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_video_stream_get_width")]
    #[doc(alias = "get_width")]
    pub fn width(&self) -> i32 {
        unsafe {
            ffi::clapper_video_stream_get_width(self.to_glib_none().0)
        }
    }

    #[doc(alias = "bitrate")]
    pub fn connect_bitrate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bitrate_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bitrate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_bitrate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "codec")]
    pub fn connect_codec_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_codec_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::codec\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_codec_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "fps")]
    pub fn connect_fps_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_fps_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::fps\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_fps_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "height")]
    pub fn connect_height_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_height_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::height\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_height_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "pixel-format")]
    pub fn connect_pixel_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_pixel_format_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::pixel-format\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_pixel_format_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "width")]
    pub fn connect_width_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_width_trampoline<F: Fn(&VideoStream) + 'static>(this: *mut ffi::ClapperVideoStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::width\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_width_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
