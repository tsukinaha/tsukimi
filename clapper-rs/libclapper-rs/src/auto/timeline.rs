// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{Marker};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperTimeline")]
    pub struct Timeline(Object<ffi::ClapperTimeline, ffi::ClapperTimelineClass>) @extends gst::Object, @implements gio::ListModel;

    match fn {
        type_ => || ffi::clapper_timeline_get_type(),
    }
}

impl Timeline {
    #[doc(alias = "clapper_timeline_get_marker")]
    #[doc(alias = "get_marker")]
    pub fn marker(&self, index: u32) -> Option<Marker> {
        unsafe {
            from_glib_full(ffi::clapper_timeline_get_marker(self.to_glib_none().0, index))
        }
    }

    #[doc(alias = "clapper_timeline_get_n_markers")]
    #[doc(alias = "get_n_markers")]
    pub fn n_markers(&self) -> u32 {
        unsafe {
            ffi::clapper_timeline_get_n_markers(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_timeline_insert_marker")]
    pub fn insert_marker(&self, marker: &Marker) -> bool {
        unsafe {
            from_glib(ffi::clapper_timeline_insert_marker(self.to_glib_none().0, marker.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_timeline_remove_marker")]
    pub fn remove_marker(&self, marker: &Marker) {
        unsafe {
            ffi::clapper_timeline_remove_marker(self.to_glib_none().0, marker.to_glib_none().0);
        }
    }

    #[doc(alias = "n-markers")]
    pub fn connect_n_markers_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_n_markers_trampoline<F: Fn(&Timeline) + 'static>(this: *mut ffi::ClapperTimeline, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::n-markers\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_n_markers_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
