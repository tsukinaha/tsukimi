// This file was generated by gir (https://github.com/gtk-rs/gir)
// from 
// from ../gir-files-gstreamer
// from ../gir-files-gtk
// DO NOT EDIT

use crate::{Stream};
use glib::{prelude::*,signal::{connect_raw, SignalHandlerId},translate::*};
use std::{boxed::Box as Box_};

glib::wrapper! {
    #[doc(alias = "ClapperAudioStream")]
    pub struct AudioStream(Object<ffi::ClapperAudioStream, ffi::ClapperAudioStreamClass>) @extends Stream, gst::Object;

    match fn {
        type_ => || ffi::clapper_audio_stream_get_type(),
    }
}

impl AudioStream {
    #[doc(alias = "clapper_audio_stream_get_bitrate")]
    #[doc(alias = "get_bitrate")]
    pub fn bitrate(&self) -> u32 {
        unsafe {
            ffi::clapper_audio_stream_get_bitrate(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_audio_stream_get_channels")]
    #[doc(alias = "get_channels")]
    pub fn channels(&self) -> i32 {
        unsafe {
            ffi::clapper_audio_stream_get_channels(self.to_glib_none().0)
        }
    }

    #[doc(alias = "clapper_audio_stream_get_codec")]
    #[doc(alias = "get_codec")]
    pub fn codec(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_audio_stream_get_codec(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_audio_stream_get_lang_code")]
    #[doc(alias = "get_lang_code")]
    pub fn lang_code(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_audio_stream_get_lang_code(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_audio_stream_get_lang_name")]
    #[doc(alias = "get_lang_name")]
    pub fn lang_name(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_audio_stream_get_lang_name(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_audio_stream_get_sample_format")]
    #[doc(alias = "get_sample_format")]
    pub fn sample_format(&self) -> Option<glib::GString> {
        unsafe {
            from_glib_full(ffi::clapper_audio_stream_get_sample_format(self.to_glib_none().0))
        }
    }

    #[doc(alias = "clapper_audio_stream_get_sample_rate")]
    #[doc(alias = "get_sample_rate")]
    pub fn sample_rate(&self) -> i32 {
        unsafe {
            ffi::clapper_audio_stream_get_sample_rate(self.to_glib_none().0)
        }
    }

    #[doc(alias = "bitrate")]
    pub fn connect_bitrate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_bitrate_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::bitrate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_bitrate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "channels")]
    pub fn connect_channels_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_channels_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::channels\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_channels_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "codec")]
    pub fn connect_codec_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_codec_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::codec\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_codec_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lang-code")]
    pub fn connect_lang_code_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lang_code_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lang-code\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_lang_code_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "lang-name")]
    pub fn connect_lang_name_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_lang_name_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::lang-name\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_lang_name_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sample-format")]
    pub fn connect_sample_format_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sample_format_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sample-format\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sample_format_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }

    #[doc(alias = "sample-rate")]
    pub fn connect_sample_rate_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_sample_rate_trampoline<F: Fn(&AudioStream) + 'static>(this: *mut ffi::ClapperAudioStream, _param_spec: glib::ffi::gpointer, f: glib::ffi::gpointer) {
            let f: &F = &*(f as *const F);
            f(&from_glib_borrow(this))
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(self.as_ptr() as *mut _, b"notify::sample-rate\0".as_ptr() as *const _,
                Some(std::mem::transmute::<_, unsafe extern "C" fn()>(notify_sample_rate_trampoline::<F> as *const ())), Box_::into_raw(f))
        }
    }
}
